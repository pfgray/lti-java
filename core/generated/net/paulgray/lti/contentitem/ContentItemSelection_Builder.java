// Autogenerated code. Do not modify.
package net.paulgray.lti.contentitem;

import com.fasterxml.jackson.annotation.JsonProperty;
import java.lang.reflect.Array;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collection;
import java.util.Collections;
import java.util.List;
import java.util.Objects;
import java.util.Spliterator;
import java.util.function.Consumer;
import java.util.function.UnaryOperator;
import java.util.stream.BaseStream;
import javax.annotation.Generated;

/**
 * Auto-generated superclass of {@link ContentItemSelection.Builder}, derived from the API of {@link
 * ContentItemSelection}.
 */
@Generated("org.inferred.freebuilder.processor.CodeGenerator")
abstract class ContentItemSelection_Builder {

  /** Creates a new builder using {@code value} as a template. */
  public static ContentItemSelection.Builder from(ContentItemSelection value) {
    return ContentItemSelection.builder().mergeFrom(value);
  }

  private String context;
  private final ArrayList<Item> graph = new ArrayList<>();

  /**
   * Sets the value to be returned by {@link ContentItemSelection#context()}.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code context} is null
   */
  @JsonProperty("@context")
  public ContentItemSelection.Builder context(String context) {
    this.context = Objects.requireNonNull(context);
    return (ContentItemSelection.Builder) this;
  }

  /**
   * Replaces the value to be returned by {@link ContentItemSelection#context()} by applying {@code
   * mapper} to it and using the result.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code mapper} is null or returns null
   */
  public ContentItemSelection.Builder mapContext(UnaryOperator<String> mapper) {
    return context(mapper.apply(context()));
  }

  /** Returns the value that will be returned by {@link ContentItemSelection#context()}. */
  public String context() {
    return context;
  }

  /**
   * Adds {@code element} to the list to be returned from {@link ContentItemSelection#graph()}.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code element} is null
   */
  public ContentItemSelection.Builder addGraph(Item element) {
    graph.add(Objects.requireNonNull(element));
    return (ContentItemSelection.Builder) this;
  }

  /**
   * Adds each element of {@code elements} to the list to be returned from {@link
   * ContentItemSelection#graph()}.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code elements} is null or contains a null element
   */
  public ContentItemSelection.Builder addGraph(Item... elements) {
    return addAllGraph(Arrays.asList(elements));
  }

  /**
   * Adds each element of {@code elements} to the list to be returned from {@link
   * ContentItemSelection#graph()}.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code elements} is null or contains a null element
   */
  public ContentItemSelection.Builder addAllGraph(Spliterator<? extends Item> elements) {
    if ((elements.characteristics() & Spliterator.SIZED) != 0) {
      long elementsSize = elements.estimateSize();
      if (elementsSize > 0 && elementsSize <= Integer.MAX_VALUE) {
        graph.ensureCapacity(graph.size() + (int) elementsSize);
      }
    }
    elements.forEachRemaining(this::addGraph);
    return (ContentItemSelection.Builder) this;
  }

  /**
   * Adds each element of {@code elements} to the list to be returned from {@link
   * ContentItemSelection#graph()}.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code elements} is null or contains a null element
   */
  public ContentItemSelection.Builder addAllGraph(BaseStream<? extends Item, ?> elements) {
    return addAllGraph(elements.spliterator());
  }

  /**
   * Adds each element of {@code elements} to the list to be returned from {@link
   * ContentItemSelection#graph()}.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code elements} is null or contains a null element
   */
  @JsonProperty("@graph")
  public ContentItemSelection.Builder addAllGraph(Iterable<? extends Item> elements) {
    return addAllGraph(elements.spliterator());
  }

  /**
   * Applies {@code mutator} to the list to be returned from {@link ContentItemSelection#graph()}.
   *
   * <p>This method mutates the list in-place. {@code mutator} is a void consumer, so any value
   * returned from a lambda will be ignored. Take care not to call pure functions, like {@link
   * Collection#stream()}.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code mutator} is null
   */
  public ContentItemSelection.Builder mutateGraph(Consumer<? super List<Item>> mutator) {
    // If addGraph is overridden, this method will be updated to delegate to it
    mutator.accept(graph);
    return (ContentItemSelection.Builder) this;
  }

  /**
   * Clears the list to be returned from {@link ContentItemSelection#graph()}.
   *
   * @return this {@code Builder} object
   */
  public ContentItemSelection.Builder clearGraph() {
    graph.clear();
    return (ContentItemSelection.Builder) this;
  }

  /**
   * Returns an unmodifiable view of the list that will be returned by {@link
   * ContentItemSelection#graph()}. Changes to this builder will be reflected in the view.
   */
  public List<Item> graph() {
    return Collections.unmodifiableList(graph);
  }

  /** Sets all property values using the given {@code ContentItemSelection} as a template. */
  public ContentItemSelection.Builder mergeFrom(ContentItemSelection value) {
    ContentItemSelection_Builder _defaults = ContentItemSelection.builder();
    if (!Objects.equals(value.context(), _defaults.context())) {
      context(value.context());
    }
    addAllGraph(value.graph());
    return (ContentItemSelection.Builder) this;
  }

  /**
   * Copies values from the given {@code Builder}. Does not affect any properties not set on the
   * input.
   */
  public ContentItemSelection.Builder mergeFrom(ContentItemSelection.Builder template) {
    ContentItemSelection_Builder _defaults = ContentItemSelection.builder();
    // Upcast to access private fields; otherwise, oddly, we get an access violation.
    ContentItemSelection_Builder base = template;
    if (!Objects.equals(template.context(), _defaults.context())) {
      context(template.context());
    }
    addAllGraph(base.graph);
    return (ContentItemSelection.Builder) this;
  }

  /** Resets the state of this builder. */
  public ContentItemSelection.Builder clear() {
    ContentItemSelection_Builder _defaults = ContentItemSelection.builder();
    context = _defaults.context;
    clearGraph();
    return (ContentItemSelection.Builder) this;
  }

  /**
   * Returns a newly-created {@link ContentItemSelection} based on the contents of the {@code
   * Builder}.
   */
  public ContentItemSelection build() {
    return new ContentItemSelection_Builder.Value(this);
  }

  /**
   * Returns a newly-created partial {@link ContentItemSelection} for use in unit tests. State
   * checking will not be performed.
   *
   * <p>Partials should only ever be used in tests. They permit writing robust test cases that won't
   * fail if this type gains more application-level constraints (e.g. new required fields) in
   * future. If you require partially complete values in production code, consider using a Builder.
   */
  public ContentItemSelection buildPartial() {
    return new ContentItemSelection_Builder.Partial(this);
  }

  private static final class Value implements ContentItemSelection {
    private final String context;
    private final List<Item> graph;

    private Value(ContentItemSelection_Builder builder) {
      this.context = builder.context;
      this.graph = immutableList(builder.graph);
    }

    @Override
    @JsonProperty("@context")
    public String context() {
      return context;
    }

    @Override
    @JsonProperty("@graph")
    public List<Item> graph() {
      return graph;
    }

    @Override
    public ContentItemSelection.Builder toBuilder() {
      return ContentItemSelection.builder().mergeFrom(this);
    }

    @Override
    public boolean equals(Object obj) {
      if (!(obj instanceof ContentItemSelection_Builder.Value)) {
        return false;
      }
      ContentItemSelection_Builder.Value other = (ContentItemSelection_Builder.Value) obj;
      return Objects.equals(context, other.context) && Objects.equals(graph, other.graph);
    }

    @Override
    public int hashCode() {
      return Objects.hash(context, graph);
    }

    @Override
    public String toString() {
      return "ContentItemSelection{" + "context=" + context + ", " + "graph=" + graph + "}";
    }
  }

  private static final class Partial implements ContentItemSelection {
    private final String context;
    private final List<Item> graph;

    Partial(ContentItemSelection_Builder builder) {
      this.context = builder.context;
      this.graph = immutableList(builder.graph);
    }

    @Override
    @JsonProperty("@context")
    public String context() {
      return context;
    }

    @Override
    @JsonProperty("@graph")
    public List<Item> graph() {
      return graph;
    }

    private static class PartialBuilder extends ContentItemSelection.Builder {
      @Override
      public ContentItemSelection build() {
        return buildPartial();
      }
    }

    @Override
    public ContentItemSelection.Builder toBuilder() {
      ContentItemSelection.Builder builder = new PartialBuilder();
      builder.context(context);
      builder.addAllGraph(graph);
      return builder;
    }

    @Override
    public boolean equals(Object obj) {
      if (!(obj instanceof ContentItemSelection_Builder.Partial)) {
        return false;
      }
      ContentItemSelection_Builder.Partial other = (ContentItemSelection_Builder.Partial) obj;
      return Objects.equals(context, other.context) && Objects.equals(graph, other.graph);
    }

    @Override
    public int hashCode() {
      return Objects.hash(context, graph);
    }

    @Override
    public String toString() {
      StringBuilder result = new StringBuilder("partial ContentItemSelection{");
      result.append("context=").append(context);
      result.append(", ");
      result.append("graph=").append(graph);
      result.append("}");
      return result.toString();
    }
  }

  @SuppressWarnings("unchecked")
  private static <E> List<E> immutableList(List<E> elements) {
    switch (elements.size()) {
      case 0:
        return Collections.emptyList();
      case 1:
        return Collections.singletonList(elements.get(0));
      default:
        return (List<E>) (List<?>) Collections.unmodifiableList(Arrays.asList(elements.toArray()));
    }
  }
}
