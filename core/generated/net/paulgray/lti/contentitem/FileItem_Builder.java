// Autogenerated code. Do not modify.
package net.paulgray.lti.contentitem;

import com.fasterxml.jackson.annotation.JsonProperty;
import java.time.Instant;
import java.util.EnumSet;
import java.util.Objects;
import java.util.Optional;
import java.util.function.UnaryOperator;
import javax.annotation.Generated;
import javax.annotation.Nullable;

/**
 * Auto-generated superclass of {@link FileItem.Builder}, derived from the API of {@link FileItem}.
 */
@Generated("org.inferred.freebuilder.processor.CodeGenerator")
abstract class FileItem_Builder {

  /** Creates a new builder using {@code value} as a template. */
  public static FileItem.Builder from(FileItem value) {
    return FileItem.builder().mergeFrom(value);
  }

  private enum Property {
    MEDIA_TYPE("mediaType"),
    ;

    private final String name;

    private Property(String name) {
      this.name = name;
    }

    @Override
    public String toString() {
      return name;
    }
  }

  private String type;
  private String mediaType;
  // Store a nullable object instead of an Optional. Escape analysis then
  // allows the JVM to optimize away the Optional objects created by and
  // passed to our API.
  private String url = null;
  // Store a nullable object instead of an Optional. Escape analysis then
  // allows the JVM to optimize away the Optional objects created by and
  // passed to our API.
  private String text = null;
  // Store a nullable object instead of an Optional. Escape analysis then
  // allows the JVM to optimize away the Optional objects created by and
  // passed to our API.
  private String title = null;
  // Store a nullable object instead of an Optional. Escape analysis then
  // allows the JVM to optimize away the Optional objects created by and
  // passed to our API.
  private PlacementAdvice placementAdvice = null;
  // Store a nullable object instead of an Optional. Escape analysis then
  // allows the JVM to optimize away the Optional objects created by and
  // passed to our API.
  private Instant expiresAt = null;
  // Store a nullable object instead of an Optional. Escape analysis then
  // allows the JVM to optimize away the Optional objects created by and
  // passed to our API.
  private Image icon = null;
  // Store a nullable object instead of an Optional. Escape analysis then
  // allows the JVM to optimize away the Optional objects created by and
  // passed to our API.
  private Image thumbnail = null;
  private String copyAdvice;
  private final EnumSet<FileItem_Builder.Property> _unsetProperties =
      EnumSet.allOf(FileItem_Builder.Property.class);

  /**
   * Sets the value to be returned by {@link FileItem#type()}.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code type} is null
   */
  @JsonProperty("@type")
  public FileItem.Builder type(String type) {
    this.type = Objects.requireNonNull(type);
    return (FileItem.Builder) this;
  }

  /**
   * Replaces the value to be returned by {@link FileItem#type()} by applying {@code mapper} to it
   * and using the result.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code mapper} is null or returns null
   */
  public FileItem.Builder mapType(UnaryOperator<String> mapper) {
    return type(mapper.apply(type()));
  }

  /** Returns the value that will be returned by {@link FileItem#type()}. */
  public String type() {
    return type;
  }

  /**
   * Sets the value to be returned by {@link FileItem#mediaType()}.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code mediaType} is null
   */
  @JsonProperty("mediaType")
  public FileItem.Builder mediaType(String mediaType) {
    this.mediaType = Objects.requireNonNull(mediaType);
    _unsetProperties.remove(FileItem_Builder.Property.MEDIA_TYPE);
    return (FileItem.Builder) this;
  }

  /**
   * Replaces the value to be returned by {@link FileItem#mediaType()} by applying {@code mapper} to
   * it and using the result.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code mapper} is null or returns null
   * @throws IllegalStateException if the field has not been set
   */
  public FileItem.Builder mapMediaType(UnaryOperator<String> mapper) {
    Objects.requireNonNull(mapper);
    return mediaType(mapper.apply(mediaType()));
  }

  /**
   * Returns the value that will be returned by {@link FileItem#mediaType()}.
   *
   * @throws IllegalStateException if the field has not been set
   */
  public String mediaType() {
    if (_unsetProperties.contains(FileItem_Builder.Property.MEDIA_TYPE)) {
      throw new IllegalStateException("mediaType not set");
    }
    return mediaType;
  }

  /**
   * Sets the value to be returned by {@link FileItem#url()}.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code url} is null
   */
  public FileItem.Builder url(String url) {
    this.url = Objects.requireNonNull(url);
    return (FileItem.Builder) this;
  }

  /**
   * Sets the value to be returned by {@link FileItem#url()}.
   *
   * @return this {@code Builder} object
   */
  @JsonProperty("url")
  public FileItem.Builder url(Optional<? extends String> url) {
    if (url.isPresent()) {
      return url(url.get());
    } else {
      return clearUrl();
    }
  }

  /**
   * Sets the value to be returned by {@link FileItem#url()}.
   *
   * @return this {@code Builder} object
   */
  public FileItem.Builder nullableUrl(@Nullable String url) {
    if (url != null) {
      return url(url);
    } else {
      return clearUrl();
    }
  }

  /**
   * If the value to be returned by {@link FileItem#url()} is present, replaces it by applying
   * {@code mapper} to it and using the result.
   *
   * <p>If the result is null, clears the value.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code mapper} is null
   */
  public FileItem.Builder mapUrl(UnaryOperator<String> mapper) {
    return url(url().map(mapper));
  }

  /**
   * Sets the value to be returned by {@link FileItem#url()} to {@link Optional#empty()
   * Optional.empty()}.
   *
   * @return this {@code Builder} object
   */
  public FileItem.Builder clearUrl() {
    url = null;
    return (FileItem.Builder) this;
  }

  /** Returns the value that will be returned by {@link FileItem#url()}. */
  public Optional<String> url() {
    return Optional.ofNullable(url);
  }

  /**
   * Sets the value to be returned by {@link FileItem#text()}.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code text} is null
   */
  public FileItem.Builder text(String text) {
    this.text = Objects.requireNonNull(text);
    return (FileItem.Builder) this;
  }

  /**
   * Sets the value to be returned by {@link FileItem#text()}.
   *
   * @return this {@code Builder} object
   */
  @JsonProperty("text")
  public FileItem.Builder text(Optional<? extends String> text) {
    if (text.isPresent()) {
      return text(text.get());
    } else {
      return clearText();
    }
  }

  /**
   * Sets the value to be returned by {@link FileItem#text()}.
   *
   * @return this {@code Builder} object
   */
  public FileItem.Builder nullableText(@Nullable String text) {
    if (text != null) {
      return text(text);
    } else {
      return clearText();
    }
  }

  /**
   * If the value to be returned by {@link FileItem#text()} is present, replaces it by applying
   * {@code mapper} to it and using the result.
   *
   * <p>If the result is null, clears the value.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code mapper} is null
   */
  public FileItem.Builder mapText(UnaryOperator<String> mapper) {
    return text(text().map(mapper));
  }

  /**
   * Sets the value to be returned by {@link FileItem#text()} to {@link Optional#empty()
   * Optional.empty()}.
   *
   * @return this {@code Builder} object
   */
  public FileItem.Builder clearText() {
    text = null;
    return (FileItem.Builder) this;
  }

  /** Returns the value that will be returned by {@link FileItem#text()}. */
  public Optional<String> text() {
    return Optional.ofNullable(text);
  }

  /**
   * Sets the value to be returned by {@link FileItem#title()}.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code title} is null
   */
  public FileItem.Builder title(String title) {
    this.title = Objects.requireNonNull(title);
    return (FileItem.Builder) this;
  }

  /**
   * Sets the value to be returned by {@link FileItem#title()}.
   *
   * @return this {@code Builder} object
   */
  @JsonProperty("title")
  public FileItem.Builder title(Optional<? extends String> title) {
    if (title.isPresent()) {
      return title(title.get());
    } else {
      return clearTitle();
    }
  }

  /**
   * Sets the value to be returned by {@link FileItem#title()}.
   *
   * @return this {@code Builder} object
   */
  public FileItem.Builder nullableTitle(@Nullable String title) {
    if (title != null) {
      return title(title);
    } else {
      return clearTitle();
    }
  }

  /**
   * If the value to be returned by {@link FileItem#title()} is present, replaces it by applying
   * {@code mapper} to it and using the result.
   *
   * <p>If the result is null, clears the value.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code mapper} is null
   */
  public FileItem.Builder mapTitle(UnaryOperator<String> mapper) {
    return title(title().map(mapper));
  }

  /**
   * Sets the value to be returned by {@link FileItem#title()} to {@link Optional#empty()
   * Optional.empty()}.
   *
   * @return this {@code Builder} object
   */
  public FileItem.Builder clearTitle() {
    title = null;
    return (FileItem.Builder) this;
  }

  /** Returns the value that will be returned by {@link FileItem#title()}. */
  public Optional<String> title() {
    return Optional.ofNullable(title);
  }

  /**
   * Sets the value to be returned by {@link FileItem#placementAdvice()}.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code placementAdvice} is null
   */
  public FileItem.Builder placementAdvice(PlacementAdvice placementAdvice) {
    this.placementAdvice = Objects.requireNonNull(placementAdvice);
    return (FileItem.Builder) this;
  }

  /**
   * Sets the value to be returned by {@link FileItem#placementAdvice()}.
   *
   * @return this {@code Builder} object
   */
  @JsonProperty("placementAdvice")
  public FileItem.Builder placementAdvice(Optional<? extends PlacementAdvice> placementAdvice) {
    if (placementAdvice.isPresent()) {
      return placementAdvice(placementAdvice.get());
    } else {
      return clearPlacementAdvice();
    }
  }

  /**
   * Sets the value to be returned by {@link FileItem#placementAdvice()}.
   *
   * @return this {@code Builder} object
   */
  public FileItem.Builder nullablePlacementAdvice(@Nullable PlacementAdvice placementAdvice) {
    if (placementAdvice != null) {
      return placementAdvice(placementAdvice);
    } else {
      return clearPlacementAdvice();
    }
  }

  /**
   * If the value to be returned by {@link FileItem#placementAdvice()} is present, replaces it by
   * applying {@code mapper} to it and using the result.
   *
   * <p>If the result is null, clears the value.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code mapper} is null
   */
  public FileItem.Builder mapPlacementAdvice(UnaryOperator<PlacementAdvice> mapper) {
    return placementAdvice(placementAdvice().map(mapper));
  }

  /**
   * Sets the value to be returned by {@link FileItem#placementAdvice()} to {@link Optional#empty()
   * Optional.empty()}.
   *
   * @return this {@code Builder} object
   */
  public FileItem.Builder clearPlacementAdvice() {
    placementAdvice = null;
    return (FileItem.Builder) this;
  }

  /** Returns the value that will be returned by {@link FileItem#placementAdvice()}. */
  public Optional<PlacementAdvice> placementAdvice() {
    return Optional.ofNullable(placementAdvice);
  }

  /**
   * Sets the value to be returned by {@link FileItem#expiresAt()}.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code expiresAt} is null
   */
  public FileItem.Builder expiresAt(Instant expiresAt) {
    this.expiresAt = Objects.requireNonNull(expiresAt);
    return (FileItem.Builder) this;
  }

  /**
   * Sets the value to be returned by {@link FileItem#expiresAt()}.
   *
   * @return this {@code Builder} object
   */
  @JsonProperty("expiresAt")
  public FileItem.Builder expiresAt(Optional<? extends Instant> expiresAt) {
    if (expiresAt.isPresent()) {
      return expiresAt(expiresAt.get());
    } else {
      return clearExpiresAt();
    }
  }

  /**
   * Sets the value to be returned by {@link FileItem#expiresAt()}.
   *
   * @return this {@code Builder} object
   */
  public FileItem.Builder nullableExpiresAt(@Nullable Instant expiresAt) {
    if (expiresAt != null) {
      return expiresAt(expiresAt);
    } else {
      return clearExpiresAt();
    }
  }

  /**
   * If the value to be returned by {@link FileItem#expiresAt()} is present, replaces it by applying
   * {@code mapper} to it and using the result.
   *
   * <p>If the result is null, clears the value.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code mapper} is null
   */
  public FileItem.Builder mapExpiresAt(UnaryOperator<Instant> mapper) {
    return expiresAt(expiresAt().map(mapper));
  }

  /**
   * Sets the value to be returned by {@link FileItem#expiresAt()} to {@link Optional#empty()
   * Optional.empty()}.
   *
   * @return this {@code Builder} object
   */
  public FileItem.Builder clearExpiresAt() {
    expiresAt = null;
    return (FileItem.Builder) this;
  }

  /** Returns the value that will be returned by {@link FileItem#expiresAt()}. */
  public Optional<Instant> expiresAt() {
    return Optional.ofNullable(expiresAt);
  }

  /**
   * Sets the value to be returned by {@link FileItem#icon()}.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code icon} is null
   */
  public FileItem.Builder icon(Image icon) {
    this.icon = Objects.requireNonNull(icon);
    return (FileItem.Builder) this;
  }

  /**
   * Sets the value to be returned by {@link FileItem#icon()}.
   *
   * @return this {@code Builder} object
   */
  @JsonProperty("icon")
  public FileItem.Builder icon(Optional<? extends Image> icon) {
    if (icon.isPresent()) {
      return icon(icon.get());
    } else {
      return clearIcon();
    }
  }

  /**
   * Sets the value to be returned by {@link FileItem#icon()}.
   *
   * @return this {@code Builder} object
   */
  public FileItem.Builder nullableIcon(@Nullable Image icon) {
    if (icon != null) {
      return icon(icon);
    } else {
      return clearIcon();
    }
  }

  /**
   * If the value to be returned by {@link FileItem#icon()} is present, replaces it by applying
   * {@code mapper} to it and using the result.
   *
   * <p>If the result is null, clears the value.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code mapper} is null
   */
  public FileItem.Builder mapIcon(UnaryOperator<Image> mapper) {
    return icon(icon().map(mapper));
  }

  /**
   * Sets the value to be returned by {@link FileItem#icon()} to {@link Optional#empty()
   * Optional.empty()}.
   *
   * @return this {@code Builder} object
   */
  public FileItem.Builder clearIcon() {
    icon = null;
    return (FileItem.Builder) this;
  }

  /** Returns the value that will be returned by {@link FileItem#icon()}. */
  public Optional<Image> icon() {
    return Optional.ofNullable(icon);
  }

  /**
   * Sets the value to be returned by {@link FileItem#thumbnail()}.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code thumbnail} is null
   */
  public FileItem.Builder thumbnail(Image thumbnail) {
    this.thumbnail = Objects.requireNonNull(thumbnail);
    return (FileItem.Builder) this;
  }

  /**
   * Sets the value to be returned by {@link FileItem#thumbnail()}.
   *
   * @return this {@code Builder} object
   */
  @JsonProperty("thumbnail")
  public FileItem.Builder thumbnail(Optional<? extends Image> thumbnail) {
    if (thumbnail.isPresent()) {
      return thumbnail(thumbnail.get());
    } else {
      return clearThumbnail();
    }
  }

  /**
   * Sets the value to be returned by {@link FileItem#thumbnail()}.
   *
   * @return this {@code Builder} object
   */
  public FileItem.Builder nullableThumbnail(@Nullable Image thumbnail) {
    if (thumbnail != null) {
      return thumbnail(thumbnail);
    } else {
      return clearThumbnail();
    }
  }

  /**
   * If the value to be returned by {@link FileItem#thumbnail()} is present, replaces it by applying
   * {@code mapper} to it and using the result.
   *
   * <p>If the result is null, clears the value.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code mapper} is null
   */
  public FileItem.Builder mapThumbnail(UnaryOperator<Image> mapper) {
    return thumbnail(thumbnail().map(mapper));
  }

  /**
   * Sets the value to be returned by {@link FileItem#thumbnail()} to {@link Optional#empty()
   * Optional.empty()}.
   *
   * @return this {@code Builder} object
   */
  public FileItem.Builder clearThumbnail() {
    thumbnail = null;
    return (FileItem.Builder) this;
  }

  /** Returns the value that will be returned by {@link FileItem#thumbnail()}. */
  public Optional<Image> thumbnail() {
    return Optional.ofNullable(thumbnail);
  }

  /**
   * Sets the value to be returned by {@link FileItem#copyAdvice()}.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code copyAdvice} is null
   */
  @JsonProperty("copyAdvice")
  public FileItem.Builder copyAdvice(String copyAdvice) {
    this.copyAdvice = Objects.requireNonNull(copyAdvice);
    return (FileItem.Builder) this;
  }

  /**
   * Replaces the value to be returned by {@link FileItem#copyAdvice()} by applying {@code mapper}
   * to it and using the result.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code mapper} is null or returns null
   */
  public FileItem.Builder mapCopyAdvice(UnaryOperator<String> mapper) {
    return copyAdvice(mapper.apply(copyAdvice()));
  }

  /** Returns the value that will be returned by {@link FileItem#copyAdvice()}. */
  public String copyAdvice() {
    return copyAdvice;
  }

  /** Sets all property values using the given {@code FileItem} as a template. */
  public FileItem.Builder mergeFrom(FileItem value) {
    FileItem_Builder _defaults = FileItem.builder();
    if (!Objects.equals(value.type(), _defaults.type())) {
      type(value.type());
    }
    if (_defaults._unsetProperties.contains(FileItem_Builder.Property.MEDIA_TYPE)
        || !Objects.equals(value.mediaType(), _defaults.mediaType())) {
      mediaType(value.mediaType());
    }
    value.url().ifPresent(this::url);
    value.text().ifPresent(this::text);
    value.title().ifPresent(this::title);
    value.placementAdvice().ifPresent(this::placementAdvice);
    value.expiresAt().ifPresent(this::expiresAt);
    value.icon().ifPresent(this::icon);
    value.thumbnail().ifPresent(this::thumbnail);
    if (!Objects.equals(value.copyAdvice(), _defaults.copyAdvice())) {
      copyAdvice(value.copyAdvice());
    }
    return (FileItem.Builder) this;
  }

  /**
   * Copies values from the given {@code Builder}. Does not affect any properties not set on the
   * input.
   */
  public FileItem.Builder mergeFrom(FileItem.Builder template) {
    FileItem_Builder _defaults = FileItem.builder();
    // Upcast to access private fields; otherwise, oddly, we get an access violation.
    FileItem_Builder base = template;
    if (!Objects.equals(template.type(), _defaults.type())) {
      type(template.type());
    }
    if (!base._unsetProperties.contains(FileItem_Builder.Property.MEDIA_TYPE)
        && (_defaults._unsetProperties.contains(FileItem_Builder.Property.MEDIA_TYPE)
            || !Objects.equals(template.mediaType(), _defaults.mediaType()))) {
      mediaType(template.mediaType());
    }
    template.url().ifPresent(this::url);
    template.text().ifPresent(this::text);
    template.title().ifPresent(this::title);
    template.placementAdvice().ifPresent(this::placementAdvice);
    template.expiresAt().ifPresent(this::expiresAt);
    template.icon().ifPresent(this::icon);
    template.thumbnail().ifPresent(this::thumbnail);
    if (!Objects.equals(template.copyAdvice(), _defaults.copyAdvice())) {
      copyAdvice(template.copyAdvice());
    }
    return (FileItem.Builder) this;
  }

  /** Resets the state of this builder. */
  public FileItem.Builder clear() {
    FileItem_Builder _defaults = FileItem.builder();
    type = _defaults.type;
    mediaType = _defaults.mediaType;
    url = _defaults.url;
    text = _defaults.text;
    title = _defaults.title;
    placementAdvice = _defaults.placementAdvice;
    expiresAt = _defaults.expiresAt;
    icon = _defaults.icon;
    thumbnail = _defaults.thumbnail;
    copyAdvice = _defaults.copyAdvice;
    _unsetProperties.clear();
    _unsetProperties.addAll(_defaults._unsetProperties);
    return (FileItem.Builder) this;
  }

  /**
   * Returns a newly-created {@link FileItem} based on the contents of the {@code Builder}.
   *
   * @throws IllegalStateException if any field has not been set
   */
  public FileItem build() {
    if (!_unsetProperties.isEmpty()) {
      throw new IllegalStateException("Not set: " + _unsetProperties);
    }
    return new FileItem_Builder.Value(this);
  }

  /**
   * Returns a newly-created partial {@link FileItem} for use in unit tests. State checking will not
   * be performed. Unset properties will throw an {@link UnsupportedOperationException} when
   * accessed via the partial object.
   *
   * <p>Partials should only ever be used in tests. They permit writing robust test cases that won't
   * fail if this type gains more application-level constraints (e.g. new required fields) in
   * future. If you require partially complete values in production code, consider using a Builder.
   */
  public FileItem buildPartial() {
    return new FileItem_Builder.Partial(this);
  }

  private static final class Value implements FileItem {
    private final String type;
    private final String mediaType;
    // Store a nullable object instead of an Optional. Escape analysis then
    // allows the JVM to optimize away the Optional objects created by our
    // getter method.
    private final String url;
    // Store a nullable object instead of an Optional. Escape analysis then
    // allows the JVM to optimize away the Optional objects created by our
    // getter method.
    private final String text;
    // Store a nullable object instead of an Optional. Escape analysis then
    // allows the JVM to optimize away the Optional objects created by our
    // getter method.
    private final String title;
    // Store a nullable object instead of an Optional. Escape analysis then
    // allows the JVM to optimize away the Optional objects created by our
    // getter method.
    private final PlacementAdvice placementAdvice;
    // Store a nullable object instead of an Optional. Escape analysis then
    // allows the JVM to optimize away the Optional objects created by our
    // getter method.
    private final Instant expiresAt;
    // Store a nullable object instead of an Optional. Escape analysis then
    // allows the JVM to optimize away the Optional objects created by our
    // getter method.
    private final Image icon;
    // Store a nullable object instead of an Optional. Escape analysis then
    // allows the JVM to optimize away the Optional objects created by our
    // getter method.
    private final Image thumbnail;
    private final String copyAdvice;

    private Value(FileItem_Builder builder) {
      this.type = builder.type;
      this.mediaType = builder.mediaType;
      this.url = builder.url;
      this.text = builder.text;
      this.title = builder.title;
      this.placementAdvice = builder.placementAdvice;
      this.expiresAt = builder.expiresAt;
      this.icon = builder.icon;
      this.thumbnail = builder.thumbnail;
      this.copyAdvice = builder.copyAdvice;
    }

    @Override
    @JsonProperty("@type")
    public String type() {
      return type;
    }

    @Override
    @JsonProperty("mediaType")
    public String mediaType() {
      return mediaType;
    }

    @Override
    @JsonProperty("url")
    public Optional<String> url() {
      return Optional.ofNullable(url);
    }

    @Override
    @JsonProperty("text")
    public Optional<String> text() {
      return Optional.ofNullable(text);
    }

    @Override
    @JsonProperty("title")
    public Optional<String> title() {
      return Optional.ofNullable(title);
    }

    @Override
    @JsonProperty("placementAdvice")
    public Optional<PlacementAdvice> placementAdvice() {
      return Optional.ofNullable(placementAdvice);
    }

    @Override
    @JsonProperty("expiresAt")
    public Optional<Instant> expiresAt() {
      return Optional.ofNullable(expiresAt);
    }

    @Override
    @JsonProperty("icon")
    public Optional<Image> icon() {
      return Optional.ofNullable(icon);
    }

    @Override
    @JsonProperty("thumbnail")
    public Optional<Image> thumbnail() {
      return Optional.ofNullable(thumbnail);
    }

    @Override
    @JsonProperty("copyAdvice")
    public String copyAdvice() {
      return copyAdvice;
    }

    @Override
    public FileItem.Builder toBuilder() {
      return FileItem.builder().mergeFrom(this);
    }

    @Override
    public boolean equals(Object obj) {
      if (!(obj instanceof FileItem_Builder.Value)) {
        return false;
      }
      FileItem_Builder.Value other = (FileItem_Builder.Value) obj;
      return Objects.equals(type, other.type)
          && Objects.equals(mediaType, other.mediaType)
          && Objects.equals(url, other.url)
          && Objects.equals(text, other.text)
          && Objects.equals(title, other.title)
          && Objects.equals(placementAdvice, other.placementAdvice)
          && Objects.equals(expiresAt, other.expiresAt)
          && Objects.equals(icon, other.icon)
          && Objects.equals(thumbnail, other.thumbnail)
          && Objects.equals(copyAdvice, other.copyAdvice);
    }

    @Override
    public int hashCode() {
      return Objects.hash(
          type,
          mediaType,
          url,
          text,
          title,
          placementAdvice,
          expiresAt,
          icon,
          thumbnail,
          copyAdvice);
    }

    @Override
    public String toString() {
      StringBuilder result = new StringBuilder("FileItem{");
      result.append("type=").append(type);
      result.append(", ");
      result.append("mediaType=").append(mediaType);
      if (url != null) {
        result.append(", ");
        result.append("url=").append(url);
      }
      if (text != null) {
        result.append(", ");
        result.append("text=").append(text);
      }
      if (title != null) {
        result.append(", ");
        result.append("title=").append(title);
      }
      if (placementAdvice != null) {
        result.append(", ");
        result.append("placementAdvice=").append(placementAdvice);
      }
      if (expiresAt != null) {
        result.append(", ");
        result.append("expiresAt=").append(expiresAt);
      }
      if (icon != null) {
        result.append(", ");
        result.append("icon=").append(icon);
      }
      if (thumbnail != null) {
        result.append(", ");
        result.append("thumbnail=").append(thumbnail);
      }
      result.append(", ");
      result.append("copyAdvice=").append(copyAdvice);
      result.append("}");
      return result.toString();
    }
  }

  private static final class Partial implements FileItem {
    private final String type;
    private final String mediaType;
    // Store a nullable object instead of an Optional. Escape analysis then
    // allows the JVM to optimize away the Optional objects created by our
    // getter method.
    private final String url;
    // Store a nullable object instead of an Optional. Escape analysis then
    // allows the JVM to optimize away the Optional objects created by our
    // getter method.
    private final String text;
    // Store a nullable object instead of an Optional. Escape analysis then
    // allows the JVM to optimize away the Optional objects created by our
    // getter method.
    private final String title;
    // Store a nullable object instead of an Optional. Escape analysis then
    // allows the JVM to optimize away the Optional objects created by our
    // getter method.
    private final PlacementAdvice placementAdvice;
    // Store a nullable object instead of an Optional. Escape analysis then
    // allows the JVM to optimize away the Optional objects created by our
    // getter method.
    private final Instant expiresAt;
    // Store a nullable object instead of an Optional. Escape analysis then
    // allows the JVM to optimize away the Optional objects created by our
    // getter method.
    private final Image icon;
    // Store a nullable object instead of an Optional. Escape analysis then
    // allows the JVM to optimize away the Optional objects created by our
    // getter method.
    private final Image thumbnail;
    private final String copyAdvice;
    private final EnumSet<FileItem_Builder.Property> _unsetProperties;

    Partial(FileItem_Builder builder) {
      this.type = builder.type;
      this.mediaType = builder.mediaType;
      this.url = builder.url;
      this.text = builder.text;
      this.title = builder.title;
      this.placementAdvice = builder.placementAdvice;
      this.expiresAt = builder.expiresAt;
      this.icon = builder.icon;
      this.thumbnail = builder.thumbnail;
      this.copyAdvice = builder.copyAdvice;
      this._unsetProperties = builder._unsetProperties.clone();
    }

    @Override
    @JsonProperty("@type")
    public String type() {
      return type;
    }

    @Override
    @JsonProperty("mediaType")
    public String mediaType() {
      if (_unsetProperties.contains(FileItem_Builder.Property.MEDIA_TYPE)) {
        throw new UnsupportedOperationException("mediaType not set");
      }
      return mediaType;
    }

    @Override
    @JsonProperty("url")
    public Optional<String> url() {
      return Optional.ofNullable(url);
    }

    @Override
    @JsonProperty("text")
    public Optional<String> text() {
      return Optional.ofNullable(text);
    }

    @Override
    @JsonProperty("title")
    public Optional<String> title() {
      return Optional.ofNullable(title);
    }

    @Override
    @JsonProperty("placementAdvice")
    public Optional<PlacementAdvice> placementAdvice() {
      return Optional.ofNullable(placementAdvice);
    }

    @Override
    @JsonProperty("expiresAt")
    public Optional<Instant> expiresAt() {
      return Optional.ofNullable(expiresAt);
    }

    @Override
    @JsonProperty("icon")
    public Optional<Image> icon() {
      return Optional.ofNullable(icon);
    }

    @Override
    @JsonProperty("thumbnail")
    public Optional<Image> thumbnail() {
      return Optional.ofNullable(thumbnail);
    }

    @Override
    @JsonProperty("copyAdvice")
    public String copyAdvice() {
      return copyAdvice;
    }

    private static class PartialBuilder extends FileItem.Builder {
      @Override
      public FileItem build() {
        return buildPartial();
      }
    }

    @Override
    public FileItem.Builder toBuilder() {
      FileItem.Builder builder = new PartialBuilder();
      builder.type(type);
      if (!_unsetProperties.contains(FileItem_Builder.Property.MEDIA_TYPE)) {
        builder.mediaType(mediaType);
      }
      builder.nullableUrl(url);
      builder.nullableText(text);
      builder.nullableTitle(title);
      builder.nullablePlacementAdvice(placementAdvice);
      builder.nullableExpiresAt(expiresAt);
      builder.nullableIcon(icon);
      builder.nullableThumbnail(thumbnail);
      builder.copyAdvice(copyAdvice);
      return builder;
    }

    @Override
    public boolean equals(Object obj) {
      if (!(obj instanceof FileItem_Builder.Partial)) {
        return false;
      }
      FileItem_Builder.Partial other = (FileItem_Builder.Partial) obj;
      return Objects.equals(type, other.type)
          && Objects.equals(mediaType, other.mediaType)
          && Objects.equals(url, other.url)
          && Objects.equals(text, other.text)
          && Objects.equals(title, other.title)
          && Objects.equals(placementAdvice, other.placementAdvice)
          && Objects.equals(expiresAt, other.expiresAt)
          && Objects.equals(icon, other.icon)
          && Objects.equals(thumbnail, other.thumbnail)
          && Objects.equals(copyAdvice, other.copyAdvice)
          && Objects.equals(_unsetProperties, other._unsetProperties);
    }

    @Override
    public int hashCode() {
      return Objects.hash(
          type,
          mediaType,
          url,
          text,
          title,
          placementAdvice,
          expiresAt,
          icon,
          thumbnail,
          copyAdvice,
          _unsetProperties);
    }

    @Override
    public String toString() {
      StringBuilder result = new StringBuilder("partial FileItem{");
      result.append("type=").append(type);
      if (!_unsetProperties.contains(FileItem_Builder.Property.MEDIA_TYPE)) {
        result.append(", ");
        result.append("mediaType=").append(mediaType);
      }
      if (url != null) {
        result.append(", ");
        result.append("url=").append(url);
      }
      if (text != null) {
        result.append(", ");
        result.append("text=").append(text);
      }
      if (title != null) {
        result.append(", ");
        result.append("title=").append(title);
      }
      if (placementAdvice != null) {
        result.append(", ");
        result.append("placementAdvice=").append(placementAdvice);
      }
      if (expiresAt != null) {
        result.append(", ");
        result.append("expiresAt=").append(expiresAt);
      }
      if (icon != null) {
        result.append(", ");
        result.append("icon=").append(icon);
      }
      if (thumbnail != null) {
        result.append(", ");
        result.append("thumbnail=").append(thumbnail);
      }
      result.append(", ");
      result.append("copyAdvice=").append(copyAdvice);
      result.append("}");
      return result.toString();
    }
  }
}
