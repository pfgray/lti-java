// Autogenerated code. Do not modify.
package net.paulgray.lti.contentitem;

import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.Objects;
import java.util.Optional;
import java.util.function.UnaryOperator;
import javax.annotation.Generated;
import javax.annotation.Nullable;

/**
 * Auto-generated superclass of {@link PlacementAdvice.Builder}, derived from the API of {@link
 * PlacementAdvice}.
 */
@Generated("org.inferred.freebuilder.processor.CodeGenerator")
abstract class PlacementAdvice_Builder {

  /** Creates a new builder using {@code value} as a template. */
  public static PlacementAdvice.Builder from(PlacementAdvice value) {
    return PlacementAdvice.builder().mergeFrom(value);
  }

  // Store a nullable object instead of an Optional. Escape analysis then
  // allows the JVM to optimize away the Optional objects created by and
  // passed to our API.
  private String presentationDocumentTarget = null;
  // Store a nullable object instead of an Optional. Escape analysis then
  // allows the JVM to optimize away the Optional objects created by and
  // passed to our API.
  private String windowTarget = null;

  /**
   * Sets the value to be returned by {@link PlacementAdvice#presentationDocumentTarget()}.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code presentationDocumentTarget} is null
   */
  public PlacementAdvice.Builder presentationDocumentTarget(String presentationDocumentTarget) {
    this.presentationDocumentTarget = Objects.requireNonNull(presentationDocumentTarget);
    return (PlacementAdvice.Builder) this;
  }

  /**
   * Sets the value to be returned by {@link PlacementAdvice#presentationDocumentTarget()}.
   *
   * @return this {@code Builder} object
   */
  @JsonProperty("presentationDocumentTarget")
  public PlacementAdvice.Builder presentationDocumentTarget(
      Optional<? extends String> presentationDocumentTarget) {
    if (presentationDocumentTarget.isPresent()) {
      return presentationDocumentTarget(presentationDocumentTarget.get());
    } else {
      return clearPresentationDocumentTarget();
    }
  }

  /**
   * Sets the value to be returned by {@link PlacementAdvice#presentationDocumentTarget()}.
   *
   * @return this {@code Builder} object
   */
  public PlacementAdvice.Builder nullablePresentationDocumentTarget(
      @Nullable String presentationDocumentTarget) {
    if (presentationDocumentTarget != null) {
      return presentationDocumentTarget(presentationDocumentTarget);
    } else {
      return clearPresentationDocumentTarget();
    }
  }

  /**
   * If the value to be returned by {@link PlacementAdvice#presentationDocumentTarget()} is present,
   * replaces it by applying {@code mapper} to it and using the result.
   *
   * <p>If the result is null, clears the value.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code mapper} is null
   */
  public PlacementAdvice.Builder mapPresentationDocumentTarget(UnaryOperator<String> mapper) {
    return presentationDocumentTarget(presentationDocumentTarget().map(mapper));
  }

  /**
   * Sets the value to be returned by {@link PlacementAdvice#presentationDocumentTarget()} to {@link
   * Optional#empty() Optional.empty()}.
   *
   * @return this {@code Builder} object
   */
  public PlacementAdvice.Builder clearPresentationDocumentTarget() {
    presentationDocumentTarget = null;
    return (PlacementAdvice.Builder) this;
  }

  /**
   * Returns the value that will be returned by {@link
   * PlacementAdvice#presentationDocumentTarget()}.
   */
  public Optional<String> presentationDocumentTarget() {
    return Optional.ofNullable(presentationDocumentTarget);
  }

  /**
   * Sets the value to be returned by {@link PlacementAdvice#windowTarget()}.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code windowTarget} is null
   */
  public PlacementAdvice.Builder windowTarget(String windowTarget) {
    this.windowTarget = Objects.requireNonNull(windowTarget);
    return (PlacementAdvice.Builder) this;
  }

  /**
   * Sets the value to be returned by {@link PlacementAdvice#windowTarget()}.
   *
   * @return this {@code Builder} object
   */
  @JsonProperty("windowTarget")
  public PlacementAdvice.Builder windowTarget(Optional<? extends String> windowTarget) {
    if (windowTarget.isPresent()) {
      return windowTarget(windowTarget.get());
    } else {
      return clearWindowTarget();
    }
  }

  /**
   * Sets the value to be returned by {@link PlacementAdvice#windowTarget()}.
   *
   * @return this {@code Builder} object
   */
  public PlacementAdvice.Builder nullableWindowTarget(@Nullable String windowTarget) {
    if (windowTarget != null) {
      return windowTarget(windowTarget);
    } else {
      return clearWindowTarget();
    }
  }

  /**
   * If the value to be returned by {@link PlacementAdvice#windowTarget()} is present, replaces it
   * by applying {@code mapper} to it and using the result.
   *
   * <p>If the result is null, clears the value.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code mapper} is null
   */
  public PlacementAdvice.Builder mapWindowTarget(UnaryOperator<String> mapper) {
    return windowTarget(windowTarget().map(mapper));
  }

  /**
   * Sets the value to be returned by {@link PlacementAdvice#windowTarget()} to {@link
   * Optional#empty() Optional.empty()}.
   *
   * @return this {@code Builder} object
   */
  public PlacementAdvice.Builder clearWindowTarget() {
    windowTarget = null;
    return (PlacementAdvice.Builder) this;
  }

  /** Returns the value that will be returned by {@link PlacementAdvice#windowTarget()}. */
  public Optional<String> windowTarget() {
    return Optional.ofNullable(windowTarget);
  }

  /** Sets all property values using the given {@code PlacementAdvice} as a template. */
  public PlacementAdvice.Builder mergeFrom(PlacementAdvice value) {
    value.presentationDocumentTarget().ifPresent(this::presentationDocumentTarget);
    value.windowTarget().ifPresent(this::windowTarget);
    return (PlacementAdvice.Builder) this;
  }

  /**
   * Copies values from the given {@code Builder}. Does not affect any properties not set on the
   * input.
   */
  public PlacementAdvice.Builder mergeFrom(PlacementAdvice.Builder template) {
    template.presentationDocumentTarget().ifPresent(this::presentationDocumentTarget);
    template.windowTarget().ifPresent(this::windowTarget);
    return (PlacementAdvice.Builder) this;
  }

  /** Resets the state of this builder. */
  public PlacementAdvice.Builder clear() {
    PlacementAdvice_Builder _defaults = PlacementAdvice.builder();
    presentationDocumentTarget = _defaults.presentationDocumentTarget;
    windowTarget = _defaults.windowTarget;
    return (PlacementAdvice.Builder) this;
  }

  /**
   * Returns a newly-created {@link PlacementAdvice} based on the contents of the {@code Builder}.
   */
  public PlacementAdvice build() {
    return new PlacementAdvice_Builder.Value(this);
  }

  /**
   * Returns a newly-created partial {@link PlacementAdvice} for use in unit tests. State checking
   * will not be performed.
   *
   * <p>Partials should only ever be used in tests. They permit writing robust test cases that won't
   * fail if this type gains more application-level constraints (e.g. new required fields) in
   * future. If you require partially complete values in production code, consider using a Builder.
   */
  public PlacementAdvice buildPartial() {
    return new PlacementAdvice_Builder.Partial(this);
  }

  private static final class Value implements PlacementAdvice {
    // Store a nullable object instead of an Optional. Escape analysis then
    // allows the JVM to optimize away the Optional objects created by our
    // getter method.
    private final String presentationDocumentTarget;
    // Store a nullable object instead of an Optional. Escape analysis then
    // allows the JVM to optimize away the Optional objects created by our
    // getter method.
    private final String windowTarget;

    private Value(PlacementAdvice_Builder builder) {
      this.presentationDocumentTarget = builder.presentationDocumentTarget;
      this.windowTarget = builder.windowTarget;
    }

    @Override
    @JsonProperty("presentationDocumentTarget")
    public Optional<String> presentationDocumentTarget() {
      return Optional.ofNullable(presentationDocumentTarget);
    }

    @Override
    @JsonProperty("windowTarget")
    public Optional<String> windowTarget() {
      return Optional.ofNullable(windowTarget);
    }

    @Override
    public PlacementAdvice.Builder toBuilder() {
      return PlacementAdvice.builder().mergeFrom(this);
    }

    @Override
    public boolean equals(Object obj) {
      if (!(obj instanceof PlacementAdvice_Builder.Value)) {
        return false;
      }
      PlacementAdvice_Builder.Value other = (PlacementAdvice_Builder.Value) obj;
      return Objects.equals(presentationDocumentTarget, other.presentationDocumentTarget)
          && Objects.equals(windowTarget, other.windowTarget);
    }

    @Override
    public int hashCode() {
      return Objects.hash(presentationDocumentTarget, windowTarget);
    }

    @Override
    public String toString() {
      StringBuilder result = new StringBuilder("PlacementAdvice{");
      String separator = "";
      if (presentationDocumentTarget != null) {
        result.append("presentationDocumentTarget=").append(presentationDocumentTarget);
        separator = ", ";
      }
      if (windowTarget != null) {
        result.append(separator);
        result.append("windowTarget=").append(windowTarget);
      }
      result.append("}");
      return result.toString();
    }
  }

  private static final class Partial implements PlacementAdvice {
    // Store a nullable object instead of an Optional. Escape analysis then
    // allows the JVM to optimize away the Optional objects created by our
    // getter method.
    private final String presentationDocumentTarget;
    // Store a nullable object instead of an Optional. Escape analysis then
    // allows the JVM to optimize away the Optional objects created by our
    // getter method.
    private final String windowTarget;

    Partial(PlacementAdvice_Builder builder) {
      this.presentationDocumentTarget = builder.presentationDocumentTarget;
      this.windowTarget = builder.windowTarget;
    }

    @Override
    @JsonProperty("presentationDocumentTarget")
    public Optional<String> presentationDocumentTarget() {
      return Optional.ofNullable(presentationDocumentTarget);
    }

    @Override
    @JsonProperty("windowTarget")
    public Optional<String> windowTarget() {
      return Optional.ofNullable(windowTarget);
    }

    private static class PartialBuilder extends PlacementAdvice.Builder {
      @Override
      public PlacementAdvice build() {
        return buildPartial();
      }
    }

    @Override
    public PlacementAdvice.Builder toBuilder() {
      PlacementAdvice.Builder builder = new PartialBuilder();
      builder.nullablePresentationDocumentTarget(presentationDocumentTarget);
      builder.nullableWindowTarget(windowTarget);
      return builder;
    }

    @Override
    public boolean equals(Object obj) {
      if (!(obj instanceof PlacementAdvice_Builder.Partial)) {
        return false;
      }
      PlacementAdvice_Builder.Partial other = (PlacementAdvice_Builder.Partial) obj;
      return Objects.equals(presentationDocumentTarget, other.presentationDocumentTarget)
          && Objects.equals(windowTarget, other.windowTarget);
    }

    @Override
    public int hashCode() {
      return Objects.hash(presentationDocumentTarget, windowTarget);
    }

    @Override
    public String toString() {
      StringBuilder result = new StringBuilder("partial PlacementAdvice{");
      String separator = "";
      if (presentationDocumentTarget != null) {
        result.append("presentationDocumentTarget=").append(presentationDocumentTarget);
        separator = ", ";
      }
      if (windowTarget != null) {
        result.append(separator);
        result.append("windowTarget=").append(windowTarget);
      }
      result.append("}");
      return result.toString();
    }
  }
}
