// Autogenerated code. Do not modify.
package net.paulgray.lti.contentitem;

import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.EnumSet;
import java.util.Objects;
import java.util.function.UnaryOperator;
import javax.annotation.Generated;

/** Auto-generated superclass of {@link Image.Builder}, derived from the API of {@link Image}. */
@Generated("org.inferred.freebuilder.processor.CodeGenerator")
abstract class Image_Builder {

  /** Creates a new builder using {@code value} as a template. */
  public static Image.Builder from(Image value) {
    return Image.builder().mergeFrom(value);
  }

  private enum Property {
    ID("id"),
    WIDTH("width"),
    HEIGHT("height"),
    ;

    private final String name;

    private Property(String name) {
      this.name = name;
    }

    @Override
    public String toString() {
      return name;
    }
  }

  private String id;
  private Integer width;
  private Integer height;
  private final EnumSet<Image_Builder.Property> _unsetProperties =
      EnumSet.allOf(Image_Builder.Property.class);

  /**
   * Sets the value to be returned by {@link Image#id()}.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code id} is null
   */
  @JsonProperty("@id")
  public Image.Builder id(String id) {
    this.id = Objects.requireNonNull(id);
    _unsetProperties.remove(Image_Builder.Property.ID);
    return (Image.Builder) this;
  }

  /**
   * Replaces the value to be returned by {@link Image#id()} by applying {@code mapper} to it and
   * using the result.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code mapper} is null or returns null
   * @throws IllegalStateException if the field has not been set
   */
  public Image.Builder mapId(UnaryOperator<String> mapper) {
    Objects.requireNonNull(mapper);
    return id(mapper.apply(id()));
  }

  /**
   * Returns the value that will be returned by {@link Image#id()}.
   *
   * @throws IllegalStateException if the field has not been set
   */
  public String id() {
    if (_unsetProperties.contains(Image_Builder.Property.ID)) {
      throw new IllegalStateException("id not set");
    }
    return id;
  }

  /**
   * Sets the value to be returned by {@link Image#width()}.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code width} is null
   */
  @JsonProperty("width")
  public Image.Builder width(Integer width) {
    this.width = Objects.requireNonNull(width);
    _unsetProperties.remove(Image_Builder.Property.WIDTH);
    return (Image.Builder) this;
  }

  /**
   * Replaces the value to be returned by {@link Image#width()} by applying {@code mapper} to it and
   * using the result.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code mapper} is null or returns null
   * @throws IllegalStateException if the field has not been set
   */
  public Image.Builder mapWidth(UnaryOperator<Integer> mapper) {
    Objects.requireNonNull(mapper);
    return width(mapper.apply(width()));
  }

  /**
   * Returns the value that will be returned by {@link Image#width()}.
   *
   * @throws IllegalStateException if the field has not been set
   */
  public Integer width() {
    if (_unsetProperties.contains(Image_Builder.Property.WIDTH)) {
      throw new IllegalStateException("width not set");
    }
    return width;
  }

  /**
   * Sets the value to be returned by {@link Image#height()}.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code height} is null
   */
  @JsonProperty("height")
  public Image.Builder height(Integer height) {
    this.height = Objects.requireNonNull(height);
    _unsetProperties.remove(Image_Builder.Property.HEIGHT);
    return (Image.Builder) this;
  }

  /**
   * Replaces the value to be returned by {@link Image#height()} by applying {@code mapper} to it
   * and using the result.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code mapper} is null or returns null
   * @throws IllegalStateException if the field has not been set
   */
  public Image.Builder mapHeight(UnaryOperator<Integer> mapper) {
    Objects.requireNonNull(mapper);
    return height(mapper.apply(height()));
  }

  /**
   * Returns the value that will be returned by {@link Image#height()}.
   *
   * @throws IllegalStateException if the field has not been set
   */
  public Integer height() {
    if (_unsetProperties.contains(Image_Builder.Property.HEIGHT)) {
      throw new IllegalStateException("height not set");
    }
    return height;
  }

  /** Sets all property values using the given {@code Image} as a template. */
  public Image.Builder mergeFrom(Image value) {
    Image_Builder _defaults = Image.builder();
    if (_defaults._unsetProperties.contains(Image_Builder.Property.ID)
        || !Objects.equals(value.id(), _defaults.id())) {
      id(value.id());
    }
    if (_defaults._unsetProperties.contains(Image_Builder.Property.WIDTH)
        || !Objects.equals(value.width(), _defaults.width())) {
      width(value.width());
    }
    if (_defaults._unsetProperties.contains(Image_Builder.Property.HEIGHT)
        || !Objects.equals(value.height(), _defaults.height())) {
      height(value.height());
    }
    return (Image.Builder) this;
  }

  /**
   * Copies values from the given {@code Builder}. Does not affect any properties not set on the
   * input.
   */
  public Image.Builder mergeFrom(Image.Builder template) {
    // Upcast to access private fields; otherwise, oddly, we get an access violation.
    Image_Builder base = template;
    Image_Builder _defaults = Image.builder();
    if (!base._unsetProperties.contains(Image_Builder.Property.ID)
        && (_defaults._unsetProperties.contains(Image_Builder.Property.ID)
            || !Objects.equals(template.id(), _defaults.id()))) {
      id(template.id());
    }
    if (!base._unsetProperties.contains(Image_Builder.Property.WIDTH)
        && (_defaults._unsetProperties.contains(Image_Builder.Property.WIDTH)
            || !Objects.equals(template.width(), _defaults.width()))) {
      width(template.width());
    }
    if (!base._unsetProperties.contains(Image_Builder.Property.HEIGHT)
        && (_defaults._unsetProperties.contains(Image_Builder.Property.HEIGHT)
            || !Objects.equals(template.height(), _defaults.height()))) {
      height(template.height());
    }
    return (Image.Builder) this;
  }

  /** Resets the state of this builder. */
  public Image.Builder clear() {
    Image_Builder _defaults = Image.builder();
    id = _defaults.id;
    width = _defaults.width;
    height = _defaults.height;
    _unsetProperties.clear();
    _unsetProperties.addAll(_defaults._unsetProperties);
    return (Image.Builder) this;
  }

  /**
   * Returns a newly-created {@link Image} based on the contents of the {@code Builder}.
   *
   * @throws IllegalStateException if any field has not been set
   */
  public Image build() {
    if (!_unsetProperties.isEmpty()) {
      throw new IllegalStateException("Not set: " + _unsetProperties);
    }
    return new Image_Builder.Value(this);
  }

  /**
   * Returns a newly-created partial {@link Image} for use in unit tests. State checking will not be
   * performed. Unset properties will throw an {@link UnsupportedOperationException} when accessed
   * via the partial object.
   *
   * <p>Partials should only ever be used in tests. They permit writing robust test cases that won't
   * fail if this type gains more application-level constraints (e.g. new required fields) in
   * future. If you require partially complete values in production code, consider using a Builder.
   */
  public Image buildPartial() {
    return new Image_Builder.Partial(this);
  }

  private static final class Value implements Image {
    private final String id;
    private final Integer width;
    private final Integer height;

    private Value(Image_Builder builder) {
      this.id = builder.id;
      this.width = builder.width;
      this.height = builder.height;
    }

    @Override
    @JsonProperty("@id")
    public String id() {
      return id;
    }

    @Override
    @JsonProperty("width")
    public Integer width() {
      return width;
    }

    @Override
    @JsonProperty("height")
    public Integer height() {
      return height;
    }

    @Override
    public Image.Builder toBuilder() {
      return Image.builder().mergeFrom(this);
    }

    @Override
    public boolean equals(Object obj) {
      if (!(obj instanceof Image_Builder.Value)) {
        return false;
      }
      Image_Builder.Value other = (Image_Builder.Value) obj;
      return Objects.equals(id, other.id)
          && Objects.equals(width, other.width)
          && Objects.equals(height, other.height);
    }

    @Override
    public int hashCode() {
      return Objects.hash(id, width, height);
    }

    @Override
    public String toString() {
      return "Image{" + "id=" + id + ", " + "width=" + width + ", " + "height=" + height + "}";
    }
  }

  private static final class Partial implements Image {
    private final String id;
    private final Integer width;
    private final Integer height;
    private final EnumSet<Image_Builder.Property> _unsetProperties;

    Partial(Image_Builder builder) {
      this.id = builder.id;
      this.width = builder.width;
      this.height = builder.height;
      this._unsetProperties = builder._unsetProperties.clone();
    }

    @Override
    @JsonProperty("@id")
    public String id() {
      if (_unsetProperties.contains(Image_Builder.Property.ID)) {
        throw new UnsupportedOperationException("id not set");
      }
      return id;
    }

    @Override
    @JsonProperty("width")
    public Integer width() {
      if (_unsetProperties.contains(Image_Builder.Property.WIDTH)) {
        throw new UnsupportedOperationException("width not set");
      }
      return width;
    }

    @Override
    @JsonProperty("height")
    public Integer height() {
      if (_unsetProperties.contains(Image_Builder.Property.HEIGHT)) {
        throw new UnsupportedOperationException("height not set");
      }
      return height;
    }

    private static class PartialBuilder extends Image.Builder {
      @Override
      public Image build() {
        return buildPartial();
      }
    }

    @Override
    public Image.Builder toBuilder() {
      Image.Builder builder = new PartialBuilder();
      if (!_unsetProperties.contains(Image_Builder.Property.ID)) {
        builder.id(id);
      }
      if (!_unsetProperties.contains(Image_Builder.Property.WIDTH)) {
        builder.width(width);
      }
      if (!_unsetProperties.contains(Image_Builder.Property.HEIGHT)) {
        builder.height(height);
      }
      return builder;
    }

    @Override
    public boolean equals(Object obj) {
      if (!(obj instanceof Image_Builder.Partial)) {
        return false;
      }
      Image_Builder.Partial other = (Image_Builder.Partial) obj;
      return Objects.equals(id, other.id)
          && Objects.equals(width, other.width)
          && Objects.equals(height, other.height)
          && Objects.equals(_unsetProperties, other._unsetProperties);
    }

    @Override
    public int hashCode() {
      return Objects.hash(id, width, height, _unsetProperties);
    }

    @Override
    public String toString() {
      StringBuilder result = new StringBuilder("partial Image{");
      String separator = "";
      if (!_unsetProperties.contains(Image_Builder.Property.ID)) {
        result.append("id=").append(id);
        separator = ", ";
      }
      if (!_unsetProperties.contains(Image_Builder.Property.WIDTH)) {
        result.append(separator);
        result.append("width=").append(width);
        separator = ", ";
      }
      if (!_unsetProperties.contains(Image_Builder.Property.HEIGHT)) {
        result.append(separator);
        result.append("height=").append(height);
      }
      result.append("}");
      return result.toString();
    }
  }
}
