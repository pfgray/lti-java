// Autogenerated code. Do not modify.
package net.paulgray.lti.message;

import java.util.Objects;
import java.util.Optional;
import java.util.function.UnaryOperator;
import javax.annotation.Generated;
import javax.annotation.Nullable;

/**
 * Auto-generated superclass of {@link ToolConsumerInfo.Builder}, derived from the API of {@link
 * ToolConsumerInfo}.
 */
@Generated("org.inferred.freebuilder.processor.CodeGenerator")
abstract class ToolConsumerInfo_Builder {

  /** Creates a new builder using {@code value} as a template. */
  public static ToolConsumerInfo.Builder from(ToolConsumerInfo value) {
    return ToolConsumerInfo.builder().mergeFrom(value);
  }

  // Store a nullable object instead of an Optional. Escape analysis then
  // allows the JVM to optimize away the Optional objects created by and
  // passed to our API.
  private String productFamilyCode = null;
  // Store a nullable object instead of an Optional. Escape analysis then
  // allows the JVM to optimize away the Optional objects created by and
  // passed to our API.
  private String version = null;

  /**
   * Sets the value to be returned by {@link ToolConsumerInfo#productFamilyCode()}.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code productFamilyCode} is null
   */
  public ToolConsumerInfo.Builder productFamilyCode(String productFamilyCode) {
    this.productFamilyCode = Objects.requireNonNull(productFamilyCode);
    return (ToolConsumerInfo.Builder) this;
  }

  /**
   * Sets the value to be returned by {@link ToolConsumerInfo#productFamilyCode()}.
   *
   * @return this {@code Builder} object
   */
  public ToolConsumerInfo.Builder productFamilyCode(Optional<? extends String> productFamilyCode) {
    if (productFamilyCode.isPresent()) {
      return productFamilyCode(productFamilyCode.get());
    } else {
      return clearProductFamilyCode();
    }
  }

  /**
   * Sets the value to be returned by {@link ToolConsumerInfo#productFamilyCode()}.
   *
   * @return this {@code Builder} object
   */
  public ToolConsumerInfo.Builder nullableProductFamilyCode(@Nullable String productFamilyCode) {
    if (productFamilyCode != null) {
      return productFamilyCode(productFamilyCode);
    } else {
      return clearProductFamilyCode();
    }
  }

  /**
   * If the value to be returned by {@link ToolConsumerInfo#productFamilyCode()} is present,
   * replaces it by applying {@code mapper} to it and using the result.
   *
   * <p>If the result is null, clears the value.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code mapper} is null
   */
  public ToolConsumerInfo.Builder mapProductFamilyCode(UnaryOperator<String> mapper) {
    return productFamilyCode(productFamilyCode().map(mapper));
  }

  /**
   * Sets the value to be returned by {@link ToolConsumerInfo#productFamilyCode()} to {@link
   * Optional#empty() Optional.empty()}.
   *
   * @return this {@code Builder} object
   */
  public ToolConsumerInfo.Builder clearProductFamilyCode() {
    productFamilyCode = null;
    return (ToolConsumerInfo.Builder) this;
  }

  /** Returns the value that will be returned by {@link ToolConsumerInfo#productFamilyCode()}. */
  public Optional<String> productFamilyCode() {
    return Optional.ofNullable(productFamilyCode);
  }

  /**
   * Sets the value to be returned by {@link ToolConsumerInfo#version()}.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code version} is null
   */
  public ToolConsumerInfo.Builder version(String version) {
    this.version = Objects.requireNonNull(version);
    return (ToolConsumerInfo.Builder) this;
  }

  /**
   * Sets the value to be returned by {@link ToolConsumerInfo#version()}.
   *
   * @return this {@code Builder} object
   */
  public ToolConsumerInfo.Builder version(Optional<? extends String> version) {
    if (version.isPresent()) {
      return version(version.get());
    } else {
      return clearVersion();
    }
  }

  /**
   * Sets the value to be returned by {@link ToolConsumerInfo#version()}.
   *
   * @return this {@code Builder} object
   */
  public ToolConsumerInfo.Builder nullableVersion(@Nullable String version) {
    if (version != null) {
      return version(version);
    } else {
      return clearVersion();
    }
  }

  /**
   * If the value to be returned by {@link ToolConsumerInfo#version()} is present, replaces it by
   * applying {@code mapper} to it and using the result.
   *
   * <p>If the result is null, clears the value.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code mapper} is null
   */
  public ToolConsumerInfo.Builder mapVersion(UnaryOperator<String> mapper) {
    return version(version().map(mapper));
  }

  /**
   * Sets the value to be returned by {@link ToolConsumerInfo#version()} to {@link Optional#empty()
   * Optional.empty()}.
   *
   * @return this {@code Builder} object
   */
  public ToolConsumerInfo.Builder clearVersion() {
    version = null;
    return (ToolConsumerInfo.Builder) this;
  }

  /** Returns the value that will be returned by {@link ToolConsumerInfo#version()}. */
  public Optional<String> version() {
    return Optional.ofNullable(version);
  }

  /** Sets all property values using the given {@code ToolConsumerInfo} as a template. */
  public ToolConsumerInfo.Builder mergeFrom(ToolConsumerInfo value) {
    value.productFamilyCode().ifPresent(this::productFamilyCode);
    value.version().ifPresent(this::version);
    return (ToolConsumerInfo.Builder) this;
  }

  /**
   * Copies values from the given {@code Builder}. Does not affect any properties not set on the
   * input.
   */
  public ToolConsumerInfo.Builder mergeFrom(ToolConsumerInfo.Builder template) {
    template.productFamilyCode().ifPresent(this::productFamilyCode);
    template.version().ifPresent(this::version);
    return (ToolConsumerInfo.Builder) this;
  }

  /** Resets the state of this builder. */
  public ToolConsumerInfo.Builder clear() {
    ToolConsumerInfo_Builder _defaults = ToolConsumerInfo.builder();
    productFamilyCode = _defaults.productFamilyCode;
    version = _defaults.version;
    return (ToolConsumerInfo.Builder) this;
  }

  /**
   * Returns a newly-created {@link ToolConsumerInfo} based on the contents of the {@code Builder}.
   */
  public ToolConsumerInfo build() {
    return new ToolConsumerInfo_Builder.Value(this);
  }

  /**
   * Returns a newly-created partial {@link ToolConsumerInfo} for use in unit tests. State checking
   * will not be performed.
   *
   * <p>Partials should only ever be used in tests. They permit writing robust test cases that won't
   * fail if this type gains more application-level constraints (e.g. new required fields) in
   * future. If you require partially complete values in production code, consider using a Builder.
   */
  public ToolConsumerInfo buildPartial() {
    return new ToolConsumerInfo_Builder.Partial(this);
  }

  private static final class Value implements ToolConsumerInfo {
    // Store a nullable object instead of an Optional. Escape analysis then
    // allows the JVM to optimize away the Optional objects created by our
    // getter method.
    private final String productFamilyCode;
    // Store a nullable object instead of an Optional. Escape analysis then
    // allows the JVM to optimize away the Optional objects created by our
    // getter method.
    private final String version;

    private Value(ToolConsumerInfo_Builder builder) {
      this.productFamilyCode = builder.productFamilyCode;
      this.version = builder.version;
    }

    @Override
    public Optional<String> productFamilyCode() {
      return Optional.ofNullable(productFamilyCode);
    }

    @Override
    public Optional<String> version() {
      return Optional.ofNullable(version);
    }

    @Override
    public ToolConsumerInfo.Builder toBuilder() {
      return ToolConsumerInfo.builder().mergeFrom(this);
    }

    @Override
    public boolean equals(Object obj) {
      if (!(obj instanceof ToolConsumerInfo_Builder.Value)) {
        return false;
      }
      ToolConsumerInfo_Builder.Value other = (ToolConsumerInfo_Builder.Value) obj;
      return Objects.equals(productFamilyCode, other.productFamilyCode)
          && Objects.equals(version, other.version);
    }

    @Override
    public int hashCode() {
      return Objects.hash(productFamilyCode, version);
    }

    @Override
    public String toString() {
      StringBuilder result = new StringBuilder("ToolConsumerInfo{");
      String separator = "";
      if (productFamilyCode != null) {
        result.append("productFamilyCode=").append(productFamilyCode);
        separator = ", ";
      }
      if (version != null) {
        result.append(separator);
        result.append("version=").append(version);
      }
      result.append("}");
      return result.toString();
    }
  }

  private static final class Partial implements ToolConsumerInfo {
    // Store a nullable object instead of an Optional. Escape analysis then
    // allows the JVM to optimize away the Optional objects created by our
    // getter method.
    private final String productFamilyCode;
    // Store a nullable object instead of an Optional. Escape analysis then
    // allows the JVM to optimize away the Optional objects created by our
    // getter method.
    private final String version;

    Partial(ToolConsumerInfo_Builder builder) {
      this.productFamilyCode = builder.productFamilyCode;
      this.version = builder.version;
    }

    @Override
    public Optional<String> productFamilyCode() {
      return Optional.ofNullable(productFamilyCode);
    }

    @Override
    public Optional<String> version() {
      return Optional.ofNullable(version);
    }

    private static class PartialBuilder extends ToolConsumerInfo.Builder {
      @Override
      public ToolConsumerInfo build() {
        return buildPartial();
      }
    }

    @Override
    public ToolConsumerInfo.Builder toBuilder() {
      ToolConsumerInfo.Builder builder = new PartialBuilder();
      builder.nullableProductFamilyCode(productFamilyCode);
      builder.nullableVersion(version);
      return builder;
    }

    @Override
    public boolean equals(Object obj) {
      if (!(obj instanceof ToolConsumerInfo_Builder.Partial)) {
        return false;
      }
      ToolConsumerInfo_Builder.Partial other = (ToolConsumerInfo_Builder.Partial) obj;
      return Objects.equals(productFamilyCode, other.productFamilyCode)
          && Objects.equals(version, other.version);
    }

    @Override
    public int hashCode() {
      return Objects.hash(productFamilyCode, version);
    }

    @Override
    public String toString() {
      StringBuilder result = new StringBuilder("partial ToolConsumerInfo{");
      String separator = "";
      if (productFamilyCode != null) {
        result.append("productFamilyCode=").append(productFamilyCode);
        separator = ", ";
      }
      if (version != null) {
        result.append(separator);
        result.append("version=").append(version);
      }
      result.append("}");
      return result.toString();
    }
  }
}
