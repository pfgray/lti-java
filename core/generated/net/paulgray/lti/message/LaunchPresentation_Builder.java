// Autogenerated code. Do not modify.
package net.paulgray.lti.message;

import java.util.Objects;
import java.util.Optional;
import java.util.function.UnaryOperator;
import javax.annotation.Generated;
import javax.annotation.Nullable;

/**
 * Auto-generated superclass of {@link LaunchPresentation.Builder}, derived from the API of {@link
 * LaunchPresentation}.
 */
@Generated("org.inferred.freebuilder.processor.CodeGenerator")
abstract class LaunchPresentation_Builder {

  /** Creates a new builder using {@code value} as a template. */
  public static LaunchPresentation.Builder from(LaunchPresentation value) {
    return LaunchPresentation.builder().mergeFrom(value);
  }

  // Store a nullable object instead of an Optional. Escape analysis then
  // allows the JVM to optimize away the Optional objects created by and
  // passed to our API.
  private String locale = null;
  // Store a nullable object instead of an Optional. Escape analysis then
  // allows the JVM to optimize away the Optional objects created by and
  // passed to our API.
  private String description = null;
  // Store a nullable object instead of an Optional. Escape analysis then
  // allows the JVM to optimize away the Optional objects created by and
  // passed to our API.
  private Target documentTarget = null;

  /**
   * Sets the value to be returned by {@link LaunchPresentation#locale()}.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code locale} is null
   */
  public LaunchPresentation.Builder locale(String locale) {
    this.locale = Objects.requireNonNull(locale);
    return (LaunchPresentation.Builder) this;
  }

  /**
   * Sets the value to be returned by {@link LaunchPresentation#locale()}.
   *
   * @return this {@code Builder} object
   */
  public LaunchPresentation.Builder locale(Optional<? extends String> locale) {
    if (locale.isPresent()) {
      return locale(locale.get());
    } else {
      return clearLocale();
    }
  }

  /**
   * Sets the value to be returned by {@link LaunchPresentation#locale()}.
   *
   * @return this {@code Builder} object
   */
  public LaunchPresentation.Builder nullableLocale(@Nullable String locale) {
    if (locale != null) {
      return locale(locale);
    } else {
      return clearLocale();
    }
  }

  /**
   * If the value to be returned by {@link LaunchPresentation#locale()} is present, replaces it by
   * applying {@code mapper} to it and using the result.
   *
   * <p>If the result is null, clears the value.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code mapper} is null
   */
  public LaunchPresentation.Builder mapLocale(UnaryOperator<String> mapper) {
    return locale(locale().map(mapper));
  }

  /**
   * Sets the value to be returned by {@link LaunchPresentation#locale()} to {@link Optional#empty()
   * Optional.empty()}.
   *
   * @return this {@code Builder} object
   */
  public LaunchPresentation.Builder clearLocale() {
    locale = null;
    return (LaunchPresentation.Builder) this;
  }

  /** Returns the value that will be returned by {@link LaunchPresentation#locale()}. */
  public Optional<String> locale() {
    return Optional.ofNullable(locale);
  }

  /**
   * Sets the value to be returned by {@link LaunchPresentation#description()}.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code description} is null
   */
  public LaunchPresentation.Builder description(String description) {
    this.description = Objects.requireNonNull(description);
    return (LaunchPresentation.Builder) this;
  }

  /**
   * Sets the value to be returned by {@link LaunchPresentation#description()}.
   *
   * @return this {@code Builder} object
   */
  public LaunchPresentation.Builder description(Optional<? extends String> description) {
    if (description.isPresent()) {
      return description(description.get());
    } else {
      return clearDescription();
    }
  }

  /**
   * Sets the value to be returned by {@link LaunchPresentation#description()}.
   *
   * @return this {@code Builder} object
   */
  public LaunchPresentation.Builder nullableDescription(@Nullable String description) {
    if (description != null) {
      return description(description);
    } else {
      return clearDescription();
    }
  }

  /**
   * If the value to be returned by {@link LaunchPresentation#description()} is present, replaces it
   * by applying {@code mapper} to it and using the result.
   *
   * <p>If the result is null, clears the value.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code mapper} is null
   */
  public LaunchPresentation.Builder mapDescription(UnaryOperator<String> mapper) {
    return description(description().map(mapper));
  }

  /**
   * Sets the value to be returned by {@link LaunchPresentation#description()} to {@link
   * Optional#empty() Optional.empty()}.
   *
   * @return this {@code Builder} object
   */
  public LaunchPresentation.Builder clearDescription() {
    description = null;
    return (LaunchPresentation.Builder) this;
  }

  /** Returns the value that will be returned by {@link LaunchPresentation#description()}. */
  public Optional<String> description() {
    return Optional.ofNullable(description);
  }

  /**
   * Sets the value to be returned by {@link LaunchPresentation#documentTarget()}.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code documentTarget} is null
   */
  public LaunchPresentation.Builder documentTarget(Target documentTarget) {
    this.documentTarget = Objects.requireNonNull(documentTarget);
    return (LaunchPresentation.Builder) this;
  }

  /**
   * Sets the value to be returned by {@link LaunchPresentation#documentTarget()}.
   *
   * @return this {@code Builder} object
   */
  public LaunchPresentation.Builder documentTarget(Optional<? extends Target> documentTarget) {
    if (documentTarget.isPresent()) {
      return documentTarget(documentTarget.get());
    } else {
      return clearDocumentTarget();
    }
  }

  /**
   * Sets the value to be returned by {@link LaunchPresentation#documentTarget()}.
   *
   * @return this {@code Builder} object
   */
  public LaunchPresentation.Builder nullableDocumentTarget(@Nullable Target documentTarget) {
    if (documentTarget != null) {
      return documentTarget(documentTarget);
    } else {
      return clearDocumentTarget();
    }
  }

  /**
   * If the value to be returned by {@link LaunchPresentation#documentTarget()} is present, replaces
   * it by applying {@code mapper} to it and using the result.
   *
   * <p>If the result is null, clears the value.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code mapper} is null
   */
  public LaunchPresentation.Builder mapDocumentTarget(UnaryOperator<Target> mapper) {
    return documentTarget(documentTarget().map(mapper));
  }

  /**
   * Sets the value to be returned by {@link LaunchPresentation#documentTarget()} to {@link
   * Optional#empty() Optional.empty()}.
   *
   * @return this {@code Builder} object
   */
  public LaunchPresentation.Builder clearDocumentTarget() {
    documentTarget = null;
    return (LaunchPresentation.Builder) this;
  }

  /** Returns the value that will be returned by {@link LaunchPresentation#documentTarget()}. */
  public Optional<Target> documentTarget() {
    return Optional.ofNullable(documentTarget);
  }

  /** Sets all property values using the given {@code LaunchPresentation} as a template. */
  public LaunchPresentation.Builder mergeFrom(LaunchPresentation value) {
    value.locale().ifPresent(this::locale);
    value.description().ifPresent(this::description);
    value.documentTarget().ifPresent(this::documentTarget);
    return (LaunchPresentation.Builder) this;
  }

  /**
   * Copies values from the given {@code Builder}. Does not affect any properties not set on the
   * input.
   */
  public LaunchPresentation.Builder mergeFrom(LaunchPresentation.Builder template) {
    template.locale().ifPresent(this::locale);
    template.description().ifPresent(this::description);
    template.documentTarget().ifPresent(this::documentTarget);
    return (LaunchPresentation.Builder) this;
  }

  /** Resets the state of this builder. */
  public LaunchPresentation.Builder clear() {
    LaunchPresentation_Builder _defaults = LaunchPresentation.builder();
    locale = _defaults.locale;
    description = _defaults.description;
    documentTarget = _defaults.documentTarget;
    return (LaunchPresentation.Builder) this;
  }

  /**
   * Returns a newly-created {@link LaunchPresentation} based on the contents of the {@code
   * Builder}.
   */
  public LaunchPresentation build() {
    return new LaunchPresentation_Builder.Value(this);
  }

  /**
   * Returns a newly-created partial {@link LaunchPresentation} for use in unit tests. State
   * checking will not be performed.
   *
   * <p>Partials should only ever be used in tests. They permit writing robust test cases that won't
   * fail if this type gains more application-level constraints (e.g. new required fields) in
   * future. If you require partially complete values in production code, consider using a Builder.
   */
  public LaunchPresentation buildPartial() {
    return new LaunchPresentation_Builder.Partial(this);
  }

  private static final class Value implements LaunchPresentation {
    // Store a nullable object instead of an Optional. Escape analysis then
    // allows the JVM to optimize away the Optional objects created by our
    // getter method.
    private final String locale;
    // Store a nullable object instead of an Optional. Escape analysis then
    // allows the JVM to optimize away the Optional objects created by our
    // getter method.
    private final String description;
    // Store a nullable object instead of an Optional. Escape analysis then
    // allows the JVM to optimize away the Optional objects created by our
    // getter method.
    private final Target documentTarget;

    private Value(LaunchPresentation_Builder builder) {
      this.locale = builder.locale;
      this.description = builder.description;
      this.documentTarget = builder.documentTarget;
    }

    @Override
    public Optional<String> locale() {
      return Optional.ofNullable(locale);
    }

    @Override
    public Optional<String> description() {
      return Optional.ofNullable(description);
    }

    @Override
    public Optional<Target> documentTarget() {
      return Optional.ofNullable(documentTarget);
    }

    @Override
    public LaunchPresentation.Builder toBuilder() {
      return LaunchPresentation.builder().mergeFrom(this);
    }

    @Override
    public boolean equals(Object obj) {
      if (!(obj instanceof LaunchPresentation_Builder.Value)) {
        return false;
      }
      LaunchPresentation_Builder.Value other = (LaunchPresentation_Builder.Value) obj;
      return Objects.equals(locale, other.locale)
          && Objects.equals(description, other.description)
          && Objects.equals(documentTarget, other.documentTarget);
    }

    @Override
    public int hashCode() {
      return Objects.hash(locale, description, documentTarget);
    }

    @Override
    public String toString() {
      StringBuilder result = new StringBuilder("LaunchPresentation{");
      String separator = "";
      if (locale != null) {
        result.append("locale=").append(locale);
        separator = ", ";
      }
      if (description != null) {
        result.append(separator);
        result.append("description=").append(description);
        separator = ", ";
      }
      if (documentTarget != null) {
        result.append(separator);
        result.append("documentTarget=").append(documentTarget);
      }
      result.append("}");
      return result.toString();
    }
  }

  private static final class Partial implements LaunchPresentation {
    // Store a nullable object instead of an Optional. Escape analysis then
    // allows the JVM to optimize away the Optional objects created by our
    // getter method.
    private final String locale;
    // Store a nullable object instead of an Optional. Escape analysis then
    // allows the JVM to optimize away the Optional objects created by our
    // getter method.
    private final String description;
    // Store a nullable object instead of an Optional. Escape analysis then
    // allows the JVM to optimize away the Optional objects created by our
    // getter method.
    private final Target documentTarget;

    Partial(LaunchPresentation_Builder builder) {
      this.locale = builder.locale;
      this.description = builder.description;
      this.documentTarget = builder.documentTarget;
    }

    @Override
    public Optional<String> locale() {
      return Optional.ofNullable(locale);
    }

    @Override
    public Optional<String> description() {
      return Optional.ofNullable(description);
    }

    @Override
    public Optional<Target> documentTarget() {
      return Optional.ofNullable(documentTarget);
    }

    private static class PartialBuilder extends LaunchPresentation.Builder {
      @Override
      public LaunchPresentation build() {
        return buildPartial();
      }
    }

    @Override
    public LaunchPresentation.Builder toBuilder() {
      LaunchPresentation.Builder builder = new PartialBuilder();
      builder.nullableLocale(locale);
      builder.nullableDescription(description);
      builder.nullableDocumentTarget(documentTarget);
      return builder;
    }

    @Override
    public boolean equals(Object obj) {
      if (!(obj instanceof LaunchPresentation_Builder.Partial)) {
        return false;
      }
      LaunchPresentation_Builder.Partial other = (LaunchPresentation_Builder.Partial) obj;
      return Objects.equals(locale, other.locale)
          && Objects.equals(description, other.description)
          && Objects.equals(documentTarget, other.documentTarget);
    }

    @Override
    public int hashCode() {
      return Objects.hash(locale, description, documentTarget);
    }

    @Override
    public String toString() {
      StringBuilder result = new StringBuilder("partial LaunchPresentation{");
      String separator = "";
      if (locale != null) {
        result.append("locale=").append(locale);
        separator = ", ";
      }
      if (description != null) {
        result.append(separator);
        result.append("description=").append(description);
        separator = ", ";
      }
      if (documentTarget != null) {
        result.append(separator);
        result.append("documentTarget=").append(documentTarget);
      }
      result.append("}");
      return result.toString();
    }
  }
}
