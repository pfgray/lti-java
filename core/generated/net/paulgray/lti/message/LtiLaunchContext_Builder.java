// Autogenerated code. Do not modify.
package net.paulgray.lti.message;

import java.util.EnumSet;
import java.util.Objects;
import java.util.function.Consumer;
import java.util.function.UnaryOperator;
import javax.annotation.Generated;
import net.paulgray.lti.LtiVersion;

/**
 * Auto-generated superclass of {@link LtiLaunchContext.Builder}, derived from the API of {@link
 * LtiLaunchContext}.
 */
@Generated("org.inferred.freebuilder.processor.CodeGenerator")
abstract class LtiLaunchContext_Builder {

  /** Creates a new builder using {@code value} as a template. */
  public static LtiLaunchContext.Builder from(LtiLaunchContext value) {
    return LtiLaunchContext.builder().mergeFrom(value);
  }

  private enum Property {
    VERSION("version"),
    MESSAGE_TYPE("messageType"),
    ;

    private final String name;

    private Property(String name) {
      this.name = name;
    }

    @Override
    public String toString() {
      return name;
    }
  }

  private Object consumer = null;
  private Object context = null;
  private Object presentation = null;
  private LtiVersion version;
  private MessageType messageType;
  private final EnumSet<LtiLaunchContext_Builder.Property> _unsetProperties =
      EnumSet.allOf(LtiLaunchContext_Builder.Property.class);

  /**
   * Sets the value to be returned by {@link LtiLaunchContext#consumer()}.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code consumer} is null
   */
  public LtiLaunchContext.Builder consumer(ToolConsumer consumer) {
    Objects.requireNonNull(consumer);
    if (this.consumer == null || this.consumer instanceof ToolConsumer) {
      this.consumer = consumer;
    } else {
      ToolConsumer.Builder builder = (ToolConsumer.Builder) this.consumer;
      builder.clear();
      builder.mergeFrom(consumer);
    }
    return (LtiLaunchContext.Builder) this;
  }

  /**
   * Sets the value to be returned by {@link LtiLaunchContext#consumer()}.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code builder} is null
   */
  public LtiLaunchContext.Builder consumer(ToolConsumer.Builder builder) {
    return consumer(builder.build());
  }

  /**
   * Applies {@code mutator} to the builder for the value that will be returned by {@link
   * LtiLaunchContext#consumer()}.
   *
   * <p>This method mutates the builder in-place. {@code mutator} is a void consumer, so any value
   * returned from a lambda will be ignored.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code mutator} is null
   */
  public LtiLaunchContext.Builder mutateConsumer(Consumer<ToolConsumer.Builder> mutator) {
    mutator.accept(consumerBuilder());
    return (LtiLaunchContext.Builder) this;
  }

  /**
   * Returns a builder for the value that will be returned by {@link LtiLaunchContext#consumer()}.
   */
  public ToolConsumer.Builder consumerBuilder() {
    if (consumer == null) {
      consumer = ToolConsumer.builder();
    } else if (consumer instanceof ToolConsumer) {
      ToolConsumer value = (ToolConsumer) consumer;
      consumer = value.toBuilder();
    }
    ToolConsumer.Builder builder = (ToolConsumer.Builder) consumer;
    return builder;
  }

  /**
   * Sets the value to be returned by {@link LtiLaunchContext#context()}.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code context} is null
   */
  public LtiLaunchContext.Builder context(Context context) {
    Objects.requireNonNull(context);
    if (this.context == null || this.context instanceof Context) {
      this.context = context;
    } else {
      Context.Builder builder = (Context.Builder) this.context;
      builder.clear();
      builder.mergeFrom(context);
    }
    return (LtiLaunchContext.Builder) this;
  }

  /**
   * Sets the value to be returned by {@link LtiLaunchContext#context()}.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code builder} is null
   */
  public LtiLaunchContext.Builder context(Context.Builder builder) {
    return context(builder.build());
  }

  /**
   * Applies {@code mutator} to the builder for the value that will be returned by {@link
   * LtiLaunchContext#context()}.
   *
   * <p>This method mutates the builder in-place. {@code mutator} is a void consumer, so any value
   * returned from a lambda will be ignored.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code mutator} is null
   */
  public LtiLaunchContext.Builder mutateContext(Consumer<Context.Builder> mutator) {
    mutator.accept(contextBuilder());
    return (LtiLaunchContext.Builder) this;
  }

  /**
   * Returns a builder for the value that will be returned by {@link LtiLaunchContext#context()}.
   */
  public Context.Builder contextBuilder() {
    if (context == null) {
      context = Context.builder();
    } else if (context instanceof Context) {
      Context value = (Context) context;
      context = value.toBuilder();
    }
    Context.Builder builder = (Context.Builder) context;
    return builder;
  }

  /**
   * Sets the value to be returned by {@link LtiLaunchContext#presentation()}.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code presentation} is null
   */
  public LtiLaunchContext.Builder presentation(LaunchPresentation presentation) {
    Objects.requireNonNull(presentation);
    if (this.presentation == null || this.presentation instanceof LaunchPresentation) {
      this.presentation = presentation;
    } else {
      LaunchPresentation.Builder builder = (LaunchPresentation.Builder) this.presentation;
      builder.clear();
      builder.mergeFrom(presentation);
    }
    return (LtiLaunchContext.Builder) this;
  }

  /**
   * Sets the value to be returned by {@link LtiLaunchContext#presentation()}.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code builder} is null
   */
  public LtiLaunchContext.Builder presentation(LaunchPresentation.Builder builder) {
    return presentation(builder.build());
  }

  /**
   * Applies {@code mutator} to the builder for the value that will be returned by {@link
   * LtiLaunchContext#presentation()}.
   *
   * <p>This method mutates the builder in-place. {@code mutator} is a void consumer, so any value
   * returned from a lambda will be ignored.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code mutator} is null
   */
  public LtiLaunchContext.Builder mutatePresentation(Consumer<LaunchPresentation.Builder> mutator) {
    mutator.accept(presentationBuilder());
    return (LtiLaunchContext.Builder) this;
  }

  /**
   * Returns a builder for the value that will be returned by {@link
   * LtiLaunchContext#presentation()}.
   */
  public LaunchPresentation.Builder presentationBuilder() {
    if (presentation == null) {
      presentation = LaunchPresentation.builder();
    } else if (presentation instanceof LaunchPresentation) {
      LaunchPresentation value = (LaunchPresentation) presentation;
      presentation = value.toBuilder();
    }
    LaunchPresentation.Builder builder = (LaunchPresentation.Builder) presentation;
    return builder;
  }

  /**
   * Sets the value to be returned by {@link LtiLaunchContext#version()}.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code version} is null
   */
  public LtiLaunchContext.Builder version(LtiVersion version) {
    this.version = Objects.requireNonNull(version);
    _unsetProperties.remove(LtiLaunchContext_Builder.Property.VERSION);
    return (LtiLaunchContext.Builder) this;
  }

  /**
   * Replaces the value to be returned by {@link LtiLaunchContext#version()} by applying {@code
   * mapper} to it and using the result.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code mapper} is null or returns null
   * @throws IllegalStateException if the field has not been set
   */
  public LtiLaunchContext.Builder mapVersion(UnaryOperator<LtiVersion> mapper) {
    Objects.requireNonNull(mapper);
    return version(mapper.apply(version()));
  }

  /**
   * Returns the value that will be returned by {@link LtiLaunchContext#version()}.
   *
   * @throws IllegalStateException if the field has not been set
   */
  public LtiVersion version() {
    if (_unsetProperties.contains(LtiLaunchContext_Builder.Property.VERSION)) {
      throw new IllegalStateException("version not set");
    }
    return version;
  }

  /**
   * Sets the value to be returned by {@link LtiLaunchContext#messageType()}.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code messageType} is null
   */
  public LtiLaunchContext.Builder messageType(MessageType messageType) {
    this.messageType = Objects.requireNonNull(messageType);
    _unsetProperties.remove(LtiLaunchContext_Builder.Property.MESSAGE_TYPE);
    return (LtiLaunchContext.Builder) this;
  }

  /**
   * Replaces the value to be returned by {@link LtiLaunchContext#messageType()} by applying {@code
   * mapper} to it and using the result.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code mapper} is null or returns null
   * @throws IllegalStateException if the field has not been set
   */
  public LtiLaunchContext.Builder mapMessageType(UnaryOperator<MessageType> mapper) {
    Objects.requireNonNull(mapper);
    return messageType(mapper.apply(messageType()));
  }

  /**
   * Returns the value that will be returned by {@link LtiLaunchContext#messageType()}.
   *
   * @throws IllegalStateException if the field has not been set
   */
  public MessageType messageType() {
    if (_unsetProperties.contains(LtiLaunchContext_Builder.Property.MESSAGE_TYPE)) {
      throw new IllegalStateException("messageType not set");
    }
    return messageType;
  }

  /** Sets all property values using the given {@code LtiLaunchContext} as a template. */
  public LtiLaunchContext.Builder mergeFrom(LtiLaunchContext value) {
    LtiLaunchContext_Builder _defaults = LtiLaunchContext.builder();
    if (consumer == null) {
      consumer = value.consumer();
    } else {
      consumerBuilder().mergeFrom(value.consumer());
    }
    if (context == null) {
      context = value.context();
    } else {
      contextBuilder().mergeFrom(value.context());
    }
    if (presentation == null) {
      presentation = value.presentation();
    } else {
      presentationBuilder().mergeFrom(value.presentation());
    }
    if (_defaults._unsetProperties.contains(LtiLaunchContext_Builder.Property.VERSION)
        || !Objects.equals(value.version(), _defaults.version())) {
      version(value.version());
    }
    if (_defaults._unsetProperties.contains(LtiLaunchContext_Builder.Property.MESSAGE_TYPE)
        || !Objects.equals(value.messageType(), _defaults.messageType())) {
      messageType(value.messageType());
    }
    return (LtiLaunchContext.Builder) this;
  }

  /**
   * Copies values from the given {@code Builder}. Does not affect any properties not set on the
   * input.
   */
  public LtiLaunchContext.Builder mergeFrom(LtiLaunchContext.Builder template) {
    // Upcast to access private fields; otherwise, oddly, we get an access violation.
    LtiLaunchContext_Builder base = template;
    LtiLaunchContext_Builder _defaults = LtiLaunchContext.builder();
    if (base.consumer == null) {
      // Nothing to merge
    } else if (base.consumer instanceof ToolConsumer) {
      ToolConsumer consumerValue = (ToolConsumer) base.consumer;
      if (consumer == null) {
        consumer = consumerValue;
      } else {
        consumerBuilder().mergeFrom(consumerValue);
      }
    } else {
      consumerBuilder().mergeFrom(base.consumerBuilder());
    }
    if (base.context == null) {
      // Nothing to merge
    } else if (base.context instanceof Context) {
      Context contextValue = (Context) base.context;
      if (context == null) {
        context = contextValue;
      } else {
        contextBuilder().mergeFrom(contextValue);
      }
    } else {
      contextBuilder().mergeFrom(base.contextBuilder());
    }
    if (base.presentation == null) {
      // Nothing to merge
    } else if (base.presentation instanceof LaunchPresentation) {
      LaunchPresentation presentationValue = (LaunchPresentation) base.presentation;
      if (presentation == null) {
        presentation = presentationValue;
      } else {
        presentationBuilder().mergeFrom(presentationValue);
      }
    } else {
      presentationBuilder().mergeFrom(base.presentationBuilder());
    }
    if (!base._unsetProperties.contains(LtiLaunchContext_Builder.Property.VERSION)
        && (_defaults._unsetProperties.contains(LtiLaunchContext_Builder.Property.VERSION)
            || !Objects.equals(template.version(), _defaults.version()))) {
      version(template.version());
    }
    if (!base._unsetProperties.contains(LtiLaunchContext_Builder.Property.MESSAGE_TYPE)
        && (_defaults._unsetProperties.contains(LtiLaunchContext_Builder.Property.MESSAGE_TYPE)
            || !Objects.equals(template.messageType(), _defaults.messageType()))) {
      messageType(template.messageType());
    }
    return (LtiLaunchContext.Builder) this;
  }

  /** Resets the state of this builder. */
  public LtiLaunchContext.Builder clear() {
    LtiLaunchContext_Builder _defaults = LtiLaunchContext.builder();
    if (consumer == null || consumer instanceof ToolConsumer) {
      consumer = null;
    } else {
      ToolConsumer.Builder consumerBuilder = (ToolConsumer.Builder) consumer;
      consumerBuilder.clear();
    }
    if (context == null || context instanceof Context) {
      context = null;
    } else {
      Context.Builder contextBuilder = (Context.Builder) context;
      contextBuilder.clear();
    }
    if (presentation == null || presentation instanceof LaunchPresentation) {
      presentation = null;
    } else {
      LaunchPresentation.Builder presentationBuilder = (LaunchPresentation.Builder) presentation;
      presentationBuilder.clear();
    }
    version = _defaults.version;
    messageType = _defaults.messageType;
    _unsetProperties.clear();
    _unsetProperties.addAll(_defaults._unsetProperties);
    return (LtiLaunchContext.Builder) this;
  }

  /**
   * Returns a newly-created {@link LtiLaunchContext} based on the contents of the {@code Builder}.
   *
   * @throws IllegalStateException if any field has not been set
   */
  public LtiLaunchContext build() {
    if (!_unsetProperties.isEmpty()) {
      throw new IllegalStateException("Not set: " + _unsetProperties);
    }
    return new LtiLaunchContext_Builder.Value(this);
  }

  /**
   * Returns a newly-created partial {@link LtiLaunchContext} for use in unit tests. State checking
   * will not be performed. Unset properties will throw an {@link UnsupportedOperationException}
   * when accessed via the partial object.
   *
   * <p>Partials should only ever be used in tests. They permit writing robust test cases that won't
   * fail if this type gains more application-level constraints (e.g. new required fields) in
   * future. If you require partially complete values in production code, consider using a Builder.
   */
  public LtiLaunchContext buildPartial() {
    return new LtiLaunchContext_Builder.Partial(this);
  }

  private static final class Value implements LtiLaunchContext {
    private final ToolConsumer consumer;
    private final Context context;
    private final LaunchPresentation presentation;
    private final LtiVersion version;
    private final MessageType messageType;

    private Value(LtiLaunchContext_Builder builder) {
      if (builder.consumer == null) {
        this.consumer = ToolConsumer.builder().build();
      } else if (builder.consumer instanceof ToolConsumer) {
        this.consumer = (ToolConsumer) builder.consumer;
      } else {
        ToolConsumer.Builder consumerBuilder = (ToolConsumer.Builder) builder.consumer;
        this.consumer = consumerBuilder.build();
      }
      if (builder.context == null) {
        this.context = Context.builder().build();
      } else if (builder.context instanceof Context) {
        this.context = (Context) builder.context;
      } else {
        Context.Builder contextBuilder = (Context.Builder) builder.context;
        this.context = contextBuilder.build();
      }
      if (builder.presentation == null) {
        this.presentation = LaunchPresentation.builder().build();
      } else if (builder.presentation instanceof LaunchPresentation) {
        this.presentation = (LaunchPresentation) builder.presentation;
      } else {
        LaunchPresentation.Builder presentationBuilder =
            (LaunchPresentation.Builder) builder.presentation;
        this.presentation = presentationBuilder.build();
      }
      this.version = builder.version;
      this.messageType = builder.messageType;
    }

    @Override
    public ToolConsumer consumer() {
      return consumer;
    }

    @Override
    public Context context() {
      return context;
    }

    @Override
    public LaunchPresentation presentation() {
      return presentation;
    }

    @Override
    public LtiVersion version() {
      return version;
    }

    @Override
    public MessageType messageType() {
      return messageType;
    }

    @Override
    public LtiLaunchContext.Builder toBuilder() {
      return LtiLaunchContext.builder().mergeFrom(this);
    }

    @Override
    public boolean equals(Object obj) {
      if (!(obj instanceof LtiLaunchContext_Builder.Value)) {
        return false;
      }
      LtiLaunchContext_Builder.Value other = (LtiLaunchContext_Builder.Value) obj;
      return Objects.equals(consumer, other.consumer)
          && Objects.equals(context, other.context)
          && Objects.equals(presentation, other.presentation)
          && Objects.equals(version, other.version)
          && Objects.equals(messageType, other.messageType);
    }

    @Override
    public int hashCode() {
      return Objects.hash(consumer, context, presentation, version, messageType);
    }

    @Override
    public String toString() {
      return "LtiLaunchContext{"
          + "consumer="
          + consumer
          + ", "
          + "context="
          + context
          + ", "
          + "presentation="
          + presentation
          + ", "
          + "version="
          + version
          + ", "
          + "messageType="
          + messageType
          + "}";
    }
  }

  private static final class Partial implements LtiLaunchContext {
    private final ToolConsumer consumer;
    private final Context context;
    private final LaunchPresentation presentation;
    private final LtiVersion version;
    private final MessageType messageType;
    private final EnumSet<LtiLaunchContext_Builder.Property> _unsetProperties;

    Partial(LtiLaunchContext_Builder builder) {
      if (builder.consumer == null) {
        this.consumer = ToolConsumer.builder().buildPartial();
      } else if (builder.consumer instanceof ToolConsumer) {
        this.consumer = (ToolConsumer) builder.consumer;
      } else {
        ToolConsumer.Builder consumerBuilder = (ToolConsumer.Builder) builder.consumer;
        this.consumer = consumerBuilder.buildPartial();
      }
      if (builder.context == null) {
        this.context = Context.builder().buildPartial();
      } else if (builder.context instanceof Context) {
        this.context = (Context) builder.context;
      } else {
        Context.Builder contextBuilder = (Context.Builder) builder.context;
        this.context = contextBuilder.buildPartial();
      }
      if (builder.presentation == null) {
        this.presentation = LaunchPresentation.builder().buildPartial();
      } else if (builder.presentation instanceof LaunchPresentation) {
        this.presentation = (LaunchPresentation) builder.presentation;
      } else {
        LaunchPresentation.Builder presentationBuilder =
            (LaunchPresentation.Builder) builder.presentation;
        this.presentation = presentationBuilder.buildPartial();
      }
      this.version = builder.version;
      this.messageType = builder.messageType;
      this._unsetProperties = builder._unsetProperties.clone();
    }

    @Override
    public ToolConsumer consumer() {
      return consumer;
    }

    @Override
    public Context context() {
      return context;
    }

    @Override
    public LaunchPresentation presentation() {
      return presentation;
    }

    @Override
    public LtiVersion version() {
      if (_unsetProperties.contains(LtiLaunchContext_Builder.Property.VERSION)) {
        throw new UnsupportedOperationException("version not set");
      }
      return version;
    }

    @Override
    public MessageType messageType() {
      if (_unsetProperties.contains(LtiLaunchContext_Builder.Property.MESSAGE_TYPE)) {
        throw new UnsupportedOperationException("messageType not set");
      }
      return messageType;
    }

    private static class PartialBuilder extends LtiLaunchContext.Builder {
      @Override
      public LtiLaunchContext build() {
        return buildPartial();
      }
    }

    @Override
    public LtiLaunchContext.Builder toBuilder() {
      LtiLaunchContext.Builder builder = new PartialBuilder();
      builder.consumerBuilder().mergeFrom(consumer.toBuilder());
      builder.contextBuilder().mergeFrom(context.toBuilder());
      builder.presentationBuilder().mergeFrom(presentation.toBuilder());
      if (!_unsetProperties.contains(LtiLaunchContext_Builder.Property.VERSION)) {
        builder.version(version);
      }
      if (!_unsetProperties.contains(LtiLaunchContext_Builder.Property.MESSAGE_TYPE)) {
        builder.messageType(messageType);
      }
      return builder;
    }

    @Override
    public boolean equals(Object obj) {
      if (!(obj instanceof LtiLaunchContext_Builder.Partial)) {
        return false;
      }
      LtiLaunchContext_Builder.Partial other = (LtiLaunchContext_Builder.Partial) obj;
      return Objects.equals(consumer, other.consumer)
          && Objects.equals(context, other.context)
          && Objects.equals(presentation, other.presentation)
          && Objects.equals(version, other.version)
          && Objects.equals(messageType, other.messageType)
          && Objects.equals(_unsetProperties, other._unsetProperties);
    }

    @Override
    public int hashCode() {
      return Objects.hash(consumer, context, presentation, version, messageType, _unsetProperties);
    }

    @Override
    public String toString() {
      StringBuilder result = new StringBuilder("partial LtiLaunchContext{");
      result.append("consumer=").append(consumer);
      result.append(", ");
      result.append("context=").append(context);
      result.append(", ");
      result.append("presentation=").append(presentation);
      if (!_unsetProperties.contains(LtiLaunchContext_Builder.Property.VERSION)) {
        result.append(", ");
        result.append("version=").append(version);
      }
      if (!_unsetProperties.contains(LtiLaunchContext_Builder.Property.MESSAGE_TYPE)) {
        result.append(", ");
        result.append("messageType=").append(messageType);
      }
      result.append("}");
      return result.toString();
    }
  }
}
