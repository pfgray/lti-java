// Autogenerated code. Do not modify.
package net.paulgray.lti.message;

import java.util.EnumSet;
import java.util.Objects;
import java.util.Optional;
import java.util.function.UnaryOperator;
import javax.annotation.Generated;
import javax.annotation.Nullable;

/** Auto-generated superclass of {@link User.Builder}, derived from the API of {@link User}. */
@Generated("org.inferred.freebuilder.processor.CodeGenerator")
abstract class User_Builder {

  /** Creates a new builder using {@code value} as a template. */
  public static User.Builder from(User value) {
    return User.builder().mergeFrom(value);
  }

  private enum Property {
    ID("id"),
    ;

    private final String name;

    private Property(String name) {
      this.name = name;
    }

    @Override
    public String toString() {
      return name;
    }
  }

  private String id;
  // Store a nullable object instead of an Optional. Escape analysis then
  // allows the JVM to optimize away the Optional objects created by and
  // passed to our API.
  private String image = null;
  // Store a nullable object instead of an Optional. Escape analysis then
  // allows the JVM to optimize away the Optional objects created by and
  // passed to our API.
  private String email = null;
  // Store a nullable object instead of an Optional. Escape analysis then
  // allows the JVM to optimize away the Optional objects created by and
  // passed to our API.
  private String fullName = null;
  // Store a nullable object instead of an Optional. Escape analysis then
  // allows the JVM to optimize away the Optional objects created by and
  // passed to our API.
  private String givenName = null;
  // Store a nullable object instead of an Optional. Escape analysis then
  // allows the JVM to optimize away the Optional objects created by and
  // passed to our API.
  private String familyName = null;
  // Store a nullable object instead of an Optional. Escape analysis then
  // allows the JVM to optimize away the Optional objects created by and
  // passed to our API.
  private String sourcedid = null;
  private final EnumSet<User_Builder.Property> _unsetProperties =
      EnumSet.allOf(User_Builder.Property.class);

  /**
   * Sets the value to be returned by {@link User#id()}.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code id} is null
   */
  public User.Builder id(String id) {
    this.id = Objects.requireNonNull(id);
    _unsetProperties.remove(User_Builder.Property.ID);
    return (User.Builder) this;
  }

  /**
   * Replaces the value to be returned by {@link User#id()} by applying {@code mapper} to it and
   * using the result.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code mapper} is null or returns null
   * @throws IllegalStateException if the field has not been set
   */
  public User.Builder mapId(UnaryOperator<String> mapper) {
    Objects.requireNonNull(mapper);
    return id(mapper.apply(id()));
  }

  /**
   * Returns the value that will be returned by {@link User#id()}.
   *
   * @throws IllegalStateException if the field has not been set
   */
  public String id() {
    if (_unsetProperties.contains(User_Builder.Property.ID)) {
      throw new IllegalStateException("id not set");
    }
    return id;
  }

  /**
   * Sets the value to be returned by {@link User#image()}.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code image} is null
   */
  public User.Builder image(String image) {
    this.image = Objects.requireNonNull(image);
    return (User.Builder) this;
  }

  /**
   * Sets the value to be returned by {@link User#image()}.
   *
   * @return this {@code Builder} object
   */
  public User.Builder image(Optional<? extends String> image) {
    if (image.isPresent()) {
      return image(image.get());
    } else {
      return clearImage();
    }
  }

  /**
   * Sets the value to be returned by {@link User#image()}.
   *
   * @return this {@code Builder} object
   */
  public User.Builder nullableImage(@Nullable String image) {
    if (image != null) {
      return image(image);
    } else {
      return clearImage();
    }
  }

  /**
   * If the value to be returned by {@link User#image()} is present, replaces it by applying {@code
   * mapper} to it and using the result.
   *
   * <p>If the result is null, clears the value.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code mapper} is null
   */
  public User.Builder mapImage(UnaryOperator<String> mapper) {
    return image(image().map(mapper));
  }

  /**
   * Sets the value to be returned by {@link User#image()} to {@link Optional#empty()
   * Optional.empty()}.
   *
   * @return this {@code Builder} object
   */
  public User.Builder clearImage() {
    image = null;
    return (User.Builder) this;
  }

  /** Returns the value that will be returned by {@link User#image()}. */
  public Optional<String> image() {
    return Optional.ofNullable(image);
  }

  /**
   * Sets the value to be returned by {@link User#email()}.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code email} is null
   */
  public User.Builder email(String email) {
    this.email = Objects.requireNonNull(email);
    return (User.Builder) this;
  }

  /**
   * Sets the value to be returned by {@link User#email()}.
   *
   * @return this {@code Builder} object
   */
  public User.Builder email(Optional<? extends String> email) {
    if (email.isPresent()) {
      return email(email.get());
    } else {
      return clearEmail();
    }
  }

  /**
   * Sets the value to be returned by {@link User#email()}.
   *
   * @return this {@code Builder} object
   */
  public User.Builder nullableEmail(@Nullable String email) {
    if (email != null) {
      return email(email);
    } else {
      return clearEmail();
    }
  }

  /**
   * If the value to be returned by {@link User#email()} is present, replaces it by applying {@code
   * mapper} to it and using the result.
   *
   * <p>If the result is null, clears the value.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code mapper} is null
   */
  public User.Builder mapEmail(UnaryOperator<String> mapper) {
    return email(email().map(mapper));
  }

  /**
   * Sets the value to be returned by {@link User#email()} to {@link Optional#empty()
   * Optional.empty()}.
   *
   * @return this {@code Builder} object
   */
  public User.Builder clearEmail() {
    email = null;
    return (User.Builder) this;
  }

  /** Returns the value that will be returned by {@link User#email()}. */
  public Optional<String> email() {
    return Optional.ofNullable(email);
  }

  /**
   * Sets the value to be returned by {@link User#fullName()}.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code fullName} is null
   */
  public User.Builder fullName(String fullName) {
    this.fullName = Objects.requireNonNull(fullName);
    return (User.Builder) this;
  }

  /**
   * Sets the value to be returned by {@link User#fullName()}.
   *
   * @return this {@code Builder} object
   */
  public User.Builder fullName(Optional<? extends String> fullName) {
    if (fullName.isPresent()) {
      return fullName(fullName.get());
    } else {
      return clearFullName();
    }
  }

  /**
   * Sets the value to be returned by {@link User#fullName()}.
   *
   * @return this {@code Builder} object
   */
  public User.Builder nullableFullName(@Nullable String fullName) {
    if (fullName != null) {
      return fullName(fullName);
    } else {
      return clearFullName();
    }
  }

  /**
   * If the value to be returned by {@link User#fullName()} is present, replaces it by applying
   * {@code mapper} to it and using the result.
   *
   * <p>If the result is null, clears the value.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code mapper} is null
   */
  public User.Builder mapFullName(UnaryOperator<String> mapper) {
    return fullName(fullName().map(mapper));
  }

  /**
   * Sets the value to be returned by {@link User#fullName()} to {@link Optional#empty()
   * Optional.empty()}.
   *
   * @return this {@code Builder} object
   */
  public User.Builder clearFullName() {
    fullName = null;
    return (User.Builder) this;
  }

  /** Returns the value that will be returned by {@link User#fullName()}. */
  public Optional<String> fullName() {
    return Optional.ofNullable(fullName);
  }

  /**
   * Sets the value to be returned by {@link User#givenName()}.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code givenName} is null
   */
  public User.Builder givenName(String givenName) {
    this.givenName = Objects.requireNonNull(givenName);
    return (User.Builder) this;
  }

  /**
   * Sets the value to be returned by {@link User#givenName()}.
   *
   * @return this {@code Builder} object
   */
  public User.Builder givenName(Optional<? extends String> givenName) {
    if (givenName.isPresent()) {
      return givenName(givenName.get());
    } else {
      return clearGivenName();
    }
  }

  /**
   * Sets the value to be returned by {@link User#givenName()}.
   *
   * @return this {@code Builder} object
   */
  public User.Builder nullableGivenName(@Nullable String givenName) {
    if (givenName != null) {
      return givenName(givenName);
    } else {
      return clearGivenName();
    }
  }

  /**
   * If the value to be returned by {@link User#givenName()} is present, replaces it by applying
   * {@code mapper} to it and using the result.
   *
   * <p>If the result is null, clears the value.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code mapper} is null
   */
  public User.Builder mapGivenName(UnaryOperator<String> mapper) {
    return givenName(givenName().map(mapper));
  }

  /**
   * Sets the value to be returned by {@link User#givenName()} to {@link Optional#empty()
   * Optional.empty()}.
   *
   * @return this {@code Builder} object
   */
  public User.Builder clearGivenName() {
    givenName = null;
    return (User.Builder) this;
  }

  /** Returns the value that will be returned by {@link User#givenName()}. */
  public Optional<String> givenName() {
    return Optional.ofNullable(givenName);
  }

  /**
   * Sets the value to be returned by {@link User#familyName()}.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code familyName} is null
   */
  public User.Builder familyName(String familyName) {
    this.familyName = Objects.requireNonNull(familyName);
    return (User.Builder) this;
  }

  /**
   * Sets the value to be returned by {@link User#familyName()}.
   *
   * @return this {@code Builder} object
   */
  public User.Builder familyName(Optional<? extends String> familyName) {
    if (familyName.isPresent()) {
      return familyName(familyName.get());
    } else {
      return clearFamilyName();
    }
  }

  /**
   * Sets the value to be returned by {@link User#familyName()}.
   *
   * @return this {@code Builder} object
   */
  public User.Builder nullableFamilyName(@Nullable String familyName) {
    if (familyName != null) {
      return familyName(familyName);
    } else {
      return clearFamilyName();
    }
  }

  /**
   * If the value to be returned by {@link User#familyName()} is present, replaces it by applying
   * {@code mapper} to it and using the result.
   *
   * <p>If the result is null, clears the value.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code mapper} is null
   */
  public User.Builder mapFamilyName(UnaryOperator<String> mapper) {
    return familyName(familyName().map(mapper));
  }

  /**
   * Sets the value to be returned by {@link User#familyName()} to {@link Optional#empty()
   * Optional.empty()}.
   *
   * @return this {@code Builder} object
   */
  public User.Builder clearFamilyName() {
    familyName = null;
    return (User.Builder) this;
  }

  /** Returns the value that will be returned by {@link User#familyName()}. */
  public Optional<String> familyName() {
    return Optional.ofNullable(familyName);
  }

  /**
   * Sets the value to be returned by {@link User#sourcedid()}.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code sourcedid} is null
   */
  public User.Builder sourcedid(String sourcedid) {
    this.sourcedid = Objects.requireNonNull(sourcedid);
    return (User.Builder) this;
  }

  /**
   * Sets the value to be returned by {@link User#sourcedid()}.
   *
   * @return this {@code Builder} object
   */
  public User.Builder sourcedid(Optional<? extends String> sourcedid) {
    if (sourcedid.isPresent()) {
      return sourcedid(sourcedid.get());
    } else {
      return clearSourcedid();
    }
  }

  /**
   * Sets the value to be returned by {@link User#sourcedid()}.
   *
   * @return this {@code Builder} object
   */
  public User.Builder nullableSourcedid(@Nullable String sourcedid) {
    if (sourcedid != null) {
      return sourcedid(sourcedid);
    } else {
      return clearSourcedid();
    }
  }

  /**
   * If the value to be returned by {@link User#sourcedid()} is present, replaces it by applying
   * {@code mapper} to it and using the result.
   *
   * <p>If the result is null, clears the value.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code mapper} is null
   */
  public User.Builder mapSourcedid(UnaryOperator<String> mapper) {
    return sourcedid(sourcedid().map(mapper));
  }

  /**
   * Sets the value to be returned by {@link User#sourcedid()} to {@link Optional#empty()
   * Optional.empty()}.
   *
   * @return this {@code Builder} object
   */
  public User.Builder clearSourcedid() {
    sourcedid = null;
    return (User.Builder) this;
  }

  /** Returns the value that will be returned by {@link User#sourcedid()}. */
  public Optional<String> sourcedid() {
    return Optional.ofNullable(sourcedid);
  }

  /** Sets all property values using the given {@code User} as a template. */
  public User.Builder mergeFrom(User value) {
    User_Builder _defaults = User.builder();
    if (_defaults._unsetProperties.contains(User_Builder.Property.ID)
        || !Objects.equals(value.id(), _defaults.id())) {
      id(value.id());
    }
    value.image().ifPresent(this::image);
    value.email().ifPresent(this::email);
    value.fullName().ifPresent(this::fullName);
    value.givenName().ifPresent(this::givenName);
    value.familyName().ifPresent(this::familyName);
    value.sourcedid().ifPresent(this::sourcedid);
    return (User.Builder) this;
  }

  /**
   * Copies values from the given {@code Builder}. Does not affect any properties not set on the
   * input.
   */
  public User.Builder mergeFrom(User.Builder template) {
    // Upcast to access private fields; otherwise, oddly, we get an access violation.
    User_Builder base = template;
    User_Builder _defaults = User.builder();
    if (!base._unsetProperties.contains(User_Builder.Property.ID)
        && (_defaults._unsetProperties.contains(User_Builder.Property.ID)
            || !Objects.equals(template.id(), _defaults.id()))) {
      id(template.id());
    }
    template.image().ifPresent(this::image);
    template.email().ifPresent(this::email);
    template.fullName().ifPresent(this::fullName);
    template.givenName().ifPresent(this::givenName);
    template.familyName().ifPresent(this::familyName);
    template.sourcedid().ifPresent(this::sourcedid);
    return (User.Builder) this;
  }

  /** Resets the state of this builder. */
  public User.Builder clear() {
    User_Builder _defaults = User.builder();
    id = _defaults.id;
    image = _defaults.image;
    email = _defaults.email;
    fullName = _defaults.fullName;
    givenName = _defaults.givenName;
    familyName = _defaults.familyName;
    sourcedid = _defaults.sourcedid;
    _unsetProperties.clear();
    _unsetProperties.addAll(_defaults._unsetProperties);
    return (User.Builder) this;
  }

  /**
   * Returns a newly-created {@link User} based on the contents of the {@code Builder}.
   *
   * @throws IllegalStateException if any field has not been set
   */
  public User build() {
    if (!_unsetProperties.isEmpty()) {
      throw new IllegalStateException("Not set: " + _unsetProperties);
    }
    return new User_Builder.Value(this);
  }

  /**
   * Returns a newly-created partial {@link User} for use in unit tests. State checking will not be
   * performed. Unset properties will throw an {@link UnsupportedOperationException} when accessed
   * via the partial object.
   *
   * <p>Partials should only ever be used in tests. They permit writing robust test cases that won't
   * fail if this type gains more application-level constraints (e.g. new required fields) in
   * future. If you require partially complete values in production code, consider using a Builder.
   */
  public User buildPartial() {
    return new User_Builder.Partial(this);
  }

  private static final class Value implements User {
    private final String id;
    // Store a nullable object instead of an Optional. Escape analysis then
    // allows the JVM to optimize away the Optional objects created by our
    // getter method.
    private final String image;
    // Store a nullable object instead of an Optional. Escape analysis then
    // allows the JVM to optimize away the Optional objects created by our
    // getter method.
    private final String email;
    // Store a nullable object instead of an Optional. Escape analysis then
    // allows the JVM to optimize away the Optional objects created by our
    // getter method.
    private final String fullName;
    // Store a nullable object instead of an Optional. Escape analysis then
    // allows the JVM to optimize away the Optional objects created by our
    // getter method.
    private final String givenName;
    // Store a nullable object instead of an Optional. Escape analysis then
    // allows the JVM to optimize away the Optional objects created by our
    // getter method.
    private final String familyName;
    // Store a nullable object instead of an Optional. Escape analysis then
    // allows the JVM to optimize away the Optional objects created by our
    // getter method.
    private final String sourcedid;

    private Value(User_Builder builder) {
      this.id = builder.id;
      this.image = builder.image;
      this.email = builder.email;
      this.fullName = builder.fullName;
      this.givenName = builder.givenName;
      this.familyName = builder.familyName;
      this.sourcedid = builder.sourcedid;
    }

    @Override
    public String id() {
      return id;
    }

    @Override
    public Optional<String> image() {
      return Optional.ofNullable(image);
    }

    @Override
    public Optional<String> email() {
      return Optional.ofNullable(email);
    }

    @Override
    public Optional<String> fullName() {
      return Optional.ofNullable(fullName);
    }

    @Override
    public Optional<String> givenName() {
      return Optional.ofNullable(givenName);
    }

    @Override
    public Optional<String> familyName() {
      return Optional.ofNullable(familyName);
    }

    @Override
    public Optional<String> sourcedid() {
      return Optional.ofNullable(sourcedid);
    }

    @Override
    public User.Builder toBuilder() {
      return User.builder().mergeFrom(this);
    }

    @Override
    public boolean equals(Object obj) {
      if (!(obj instanceof User_Builder.Value)) {
        return false;
      }
      User_Builder.Value other = (User_Builder.Value) obj;
      return Objects.equals(id, other.id)
          && Objects.equals(image, other.image)
          && Objects.equals(email, other.email)
          && Objects.equals(fullName, other.fullName)
          && Objects.equals(givenName, other.givenName)
          && Objects.equals(familyName, other.familyName)
          && Objects.equals(sourcedid, other.sourcedid);
    }

    @Override
    public int hashCode() {
      return Objects.hash(id, image, email, fullName, givenName, familyName, sourcedid);
    }

    @Override
    public String toString() {
      StringBuilder result = new StringBuilder("User{");
      String separator = "";
      result.append("id=").append(id);
      separator = ", ";
      if (image != null) {
        result.append(separator);
        result.append("image=").append(image);
        separator = ", ";
      }
      if (email != null) {
        result.append(separator);
        result.append("email=").append(email);
        separator = ", ";
      }
      if (fullName != null) {
        result.append(separator);
        result.append("fullName=").append(fullName);
        separator = ", ";
      }
      if (givenName != null) {
        result.append(separator);
        result.append("givenName=").append(givenName);
        separator = ", ";
      }
      if (familyName != null) {
        result.append(separator);
        result.append("familyName=").append(familyName);
        separator = ", ";
      }
      if (sourcedid != null) {
        result.append(separator);
        result.append("sourcedid=").append(sourcedid);
      }
      result.append("}");
      return result.toString();
    }
  }

  private static final class Partial implements User {
    private final String id;
    // Store a nullable object instead of an Optional. Escape analysis then
    // allows the JVM to optimize away the Optional objects created by our
    // getter method.
    private final String image;
    // Store a nullable object instead of an Optional. Escape analysis then
    // allows the JVM to optimize away the Optional objects created by our
    // getter method.
    private final String email;
    // Store a nullable object instead of an Optional. Escape analysis then
    // allows the JVM to optimize away the Optional objects created by our
    // getter method.
    private final String fullName;
    // Store a nullable object instead of an Optional. Escape analysis then
    // allows the JVM to optimize away the Optional objects created by our
    // getter method.
    private final String givenName;
    // Store a nullable object instead of an Optional. Escape analysis then
    // allows the JVM to optimize away the Optional objects created by our
    // getter method.
    private final String familyName;
    // Store a nullable object instead of an Optional. Escape analysis then
    // allows the JVM to optimize away the Optional objects created by our
    // getter method.
    private final String sourcedid;
    private final EnumSet<User_Builder.Property> _unsetProperties;

    Partial(User_Builder builder) {
      this.id = builder.id;
      this.image = builder.image;
      this.email = builder.email;
      this.fullName = builder.fullName;
      this.givenName = builder.givenName;
      this.familyName = builder.familyName;
      this.sourcedid = builder.sourcedid;
      this._unsetProperties = builder._unsetProperties.clone();
    }

    @Override
    public String id() {
      if (_unsetProperties.contains(User_Builder.Property.ID)) {
        throw new UnsupportedOperationException("id not set");
      }
      return id;
    }

    @Override
    public Optional<String> image() {
      return Optional.ofNullable(image);
    }

    @Override
    public Optional<String> email() {
      return Optional.ofNullable(email);
    }

    @Override
    public Optional<String> fullName() {
      return Optional.ofNullable(fullName);
    }

    @Override
    public Optional<String> givenName() {
      return Optional.ofNullable(givenName);
    }

    @Override
    public Optional<String> familyName() {
      return Optional.ofNullable(familyName);
    }

    @Override
    public Optional<String> sourcedid() {
      return Optional.ofNullable(sourcedid);
    }

    private static class PartialBuilder extends User.Builder {
      @Override
      public User build() {
        return buildPartial();
      }
    }

    @Override
    public User.Builder toBuilder() {
      User.Builder builder = new PartialBuilder();
      if (!_unsetProperties.contains(User_Builder.Property.ID)) {
        builder.id(id);
      }
      builder.nullableImage(image);
      builder.nullableEmail(email);
      builder.nullableFullName(fullName);
      builder.nullableGivenName(givenName);
      builder.nullableFamilyName(familyName);
      builder.nullableSourcedid(sourcedid);
      return builder;
    }

    @Override
    public boolean equals(Object obj) {
      if (!(obj instanceof User_Builder.Partial)) {
        return false;
      }
      User_Builder.Partial other = (User_Builder.Partial) obj;
      return Objects.equals(id, other.id)
          && Objects.equals(image, other.image)
          && Objects.equals(email, other.email)
          && Objects.equals(fullName, other.fullName)
          && Objects.equals(givenName, other.givenName)
          && Objects.equals(familyName, other.familyName)
          && Objects.equals(sourcedid, other.sourcedid)
          && Objects.equals(_unsetProperties, other._unsetProperties);
    }

    @Override
    public int hashCode() {
      return Objects.hash(
          id, image, email, fullName, givenName, familyName, sourcedid, _unsetProperties);
    }

    @Override
    public String toString() {
      StringBuilder result = new StringBuilder("partial User{");
      String separator = "";
      if (!_unsetProperties.contains(User_Builder.Property.ID)) {
        result.append("id=").append(id);
        separator = ", ";
      }
      if (image != null) {
        result.append(separator);
        result.append("image=").append(image);
        separator = ", ";
      }
      if (email != null) {
        result.append(separator);
        result.append("email=").append(email);
        separator = ", ";
      }
      if (fullName != null) {
        result.append(separator);
        result.append("fullName=").append(fullName);
        separator = ", ";
      }
      if (givenName != null) {
        result.append(separator);
        result.append("givenName=").append(givenName);
        separator = ", ";
      }
      if (familyName != null) {
        result.append(separator);
        result.append("familyName=").append(familyName);
        separator = ", ";
      }
      if (sourcedid != null) {
        result.append(separator);
        result.append("sourcedid=").append(sourcedid);
      }
      result.append("}");
      return result.toString();
    }
  }
}
