// Autogenerated code. Do not modify.
package net.paulgray.lti.message;

import java.util.Objects;
import java.util.Optional;
import java.util.function.UnaryOperator;
import javax.annotation.Generated;
import javax.annotation.Nullable;

/**
 * Auto-generated superclass of {@link ToolConsumerInstance.Builder}, derived from the API of {@link
 * ToolConsumerInstance}.
 */
@Generated("org.inferred.freebuilder.processor.CodeGenerator")
abstract class ToolConsumerInstance_Builder {

  /** Creates a new builder using {@code value} as a template. */
  public static ToolConsumerInstance.Builder from(ToolConsumerInstance value) {
    return ToolConsumerInstance.builder().mergeFrom(value);
  }

  // Store a nullable object instead of an Optional. Escape analysis then
  // allows the JVM to optimize away the Optional objects created by and
  // passed to our API.
  private String contactEmail = null;
  // Store a nullable object instead of an Optional. Escape analysis then
  // allows the JVM to optimize away the Optional objects created by and
  // passed to our API.
  private String description = null;
  // Store a nullable object instead of an Optional. Escape analysis then
  // allows the JVM to optimize away the Optional objects created by and
  // passed to our API.
  private String guid = null;
  // Store a nullable object instead of an Optional. Escape analysis then
  // allows the JVM to optimize away the Optional objects created by and
  // passed to our API.
  private String name = null;
  // Store a nullable object instead of an Optional. Escape analysis then
  // allows the JVM to optimize away the Optional objects created by and
  // passed to our API.
  private String url = null;

  /**
   * Sets the value to be returned by {@link ToolConsumerInstance#contactEmail()}.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code contactEmail} is null
   */
  public ToolConsumerInstance.Builder contactEmail(String contactEmail) {
    this.contactEmail = Objects.requireNonNull(contactEmail);
    return (ToolConsumerInstance.Builder) this;
  }

  /**
   * Sets the value to be returned by {@link ToolConsumerInstance#contactEmail()}.
   *
   * @return this {@code Builder} object
   */
  public ToolConsumerInstance.Builder contactEmail(Optional<? extends String> contactEmail) {
    if (contactEmail.isPresent()) {
      return contactEmail(contactEmail.get());
    } else {
      return clearContactEmail();
    }
  }

  /**
   * Sets the value to be returned by {@link ToolConsumerInstance#contactEmail()}.
   *
   * @return this {@code Builder} object
   */
  public ToolConsumerInstance.Builder nullableContactEmail(@Nullable String contactEmail) {
    if (contactEmail != null) {
      return contactEmail(contactEmail);
    } else {
      return clearContactEmail();
    }
  }

  /**
   * If the value to be returned by {@link ToolConsumerInstance#contactEmail()} is present, replaces
   * it by applying {@code mapper} to it and using the result.
   *
   * <p>If the result is null, clears the value.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code mapper} is null
   */
  public ToolConsumerInstance.Builder mapContactEmail(UnaryOperator<String> mapper) {
    return contactEmail(contactEmail().map(mapper));
  }

  /**
   * Sets the value to be returned by {@link ToolConsumerInstance#contactEmail()} to {@link
   * Optional#empty() Optional.empty()}.
   *
   * @return this {@code Builder} object
   */
  public ToolConsumerInstance.Builder clearContactEmail() {
    contactEmail = null;
    return (ToolConsumerInstance.Builder) this;
  }

  /** Returns the value that will be returned by {@link ToolConsumerInstance#contactEmail()}. */
  public Optional<String> contactEmail() {
    return Optional.ofNullable(contactEmail);
  }

  /**
   * Sets the value to be returned by {@link ToolConsumerInstance#description()}.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code description} is null
   */
  public ToolConsumerInstance.Builder description(String description) {
    this.description = Objects.requireNonNull(description);
    return (ToolConsumerInstance.Builder) this;
  }

  /**
   * Sets the value to be returned by {@link ToolConsumerInstance#description()}.
   *
   * @return this {@code Builder} object
   */
  public ToolConsumerInstance.Builder description(Optional<? extends String> description) {
    if (description.isPresent()) {
      return description(description.get());
    } else {
      return clearDescription();
    }
  }

  /**
   * Sets the value to be returned by {@link ToolConsumerInstance#description()}.
   *
   * @return this {@code Builder} object
   */
  public ToolConsumerInstance.Builder nullableDescription(@Nullable String description) {
    if (description != null) {
      return description(description);
    } else {
      return clearDescription();
    }
  }

  /**
   * If the value to be returned by {@link ToolConsumerInstance#description()} is present, replaces
   * it by applying {@code mapper} to it and using the result.
   *
   * <p>If the result is null, clears the value.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code mapper} is null
   */
  public ToolConsumerInstance.Builder mapDescription(UnaryOperator<String> mapper) {
    return description(description().map(mapper));
  }

  /**
   * Sets the value to be returned by {@link ToolConsumerInstance#description()} to {@link
   * Optional#empty() Optional.empty()}.
   *
   * @return this {@code Builder} object
   */
  public ToolConsumerInstance.Builder clearDescription() {
    description = null;
    return (ToolConsumerInstance.Builder) this;
  }

  /** Returns the value that will be returned by {@link ToolConsumerInstance#description()}. */
  public Optional<String> description() {
    return Optional.ofNullable(description);
  }

  /**
   * Sets the value to be returned by {@link ToolConsumerInstance#guid()}.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code guid} is null
   */
  public ToolConsumerInstance.Builder guid(String guid) {
    this.guid = Objects.requireNonNull(guid);
    return (ToolConsumerInstance.Builder) this;
  }

  /**
   * Sets the value to be returned by {@link ToolConsumerInstance#guid()}.
   *
   * @return this {@code Builder} object
   */
  public ToolConsumerInstance.Builder guid(Optional<? extends String> guid) {
    if (guid.isPresent()) {
      return guid(guid.get());
    } else {
      return clearGuid();
    }
  }

  /**
   * Sets the value to be returned by {@link ToolConsumerInstance#guid()}.
   *
   * @return this {@code Builder} object
   */
  public ToolConsumerInstance.Builder nullableGuid(@Nullable String guid) {
    if (guid != null) {
      return guid(guid);
    } else {
      return clearGuid();
    }
  }

  /**
   * If the value to be returned by {@link ToolConsumerInstance#guid()} is present, replaces it by
   * applying {@code mapper} to it and using the result.
   *
   * <p>If the result is null, clears the value.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code mapper} is null
   */
  public ToolConsumerInstance.Builder mapGuid(UnaryOperator<String> mapper) {
    return guid(guid().map(mapper));
  }

  /**
   * Sets the value to be returned by {@link ToolConsumerInstance#guid()} to {@link Optional#empty()
   * Optional.empty()}.
   *
   * @return this {@code Builder} object
   */
  public ToolConsumerInstance.Builder clearGuid() {
    guid = null;
    return (ToolConsumerInstance.Builder) this;
  }

  /** Returns the value that will be returned by {@link ToolConsumerInstance#guid()}. */
  public Optional<String> guid() {
    return Optional.ofNullable(guid);
  }

  /**
   * Sets the value to be returned by {@link ToolConsumerInstance#name()}.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code name} is null
   */
  public ToolConsumerInstance.Builder name(String name) {
    this.name = Objects.requireNonNull(name);
    return (ToolConsumerInstance.Builder) this;
  }

  /**
   * Sets the value to be returned by {@link ToolConsumerInstance#name()}.
   *
   * @return this {@code Builder} object
   */
  public ToolConsumerInstance.Builder name(Optional<? extends String> name) {
    if (name.isPresent()) {
      return name(name.get());
    } else {
      return clearName();
    }
  }

  /**
   * Sets the value to be returned by {@link ToolConsumerInstance#name()}.
   *
   * @return this {@code Builder} object
   */
  public ToolConsumerInstance.Builder nullableName(@Nullable String name) {
    if (name != null) {
      return name(name);
    } else {
      return clearName();
    }
  }

  /**
   * If the value to be returned by {@link ToolConsumerInstance#name()} is present, replaces it by
   * applying {@code mapper} to it and using the result.
   *
   * <p>If the result is null, clears the value.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code mapper} is null
   */
  public ToolConsumerInstance.Builder mapName(UnaryOperator<String> mapper) {
    return name(name().map(mapper));
  }

  /**
   * Sets the value to be returned by {@link ToolConsumerInstance#name()} to {@link Optional#empty()
   * Optional.empty()}.
   *
   * @return this {@code Builder} object
   */
  public ToolConsumerInstance.Builder clearName() {
    name = null;
    return (ToolConsumerInstance.Builder) this;
  }

  /** Returns the value that will be returned by {@link ToolConsumerInstance#name()}. */
  public Optional<String> name() {
    return Optional.ofNullable(name);
  }

  /**
   * Sets the value to be returned by {@link ToolConsumerInstance#url()}.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code url} is null
   */
  public ToolConsumerInstance.Builder url(String url) {
    this.url = Objects.requireNonNull(url);
    return (ToolConsumerInstance.Builder) this;
  }

  /**
   * Sets the value to be returned by {@link ToolConsumerInstance#url()}.
   *
   * @return this {@code Builder} object
   */
  public ToolConsumerInstance.Builder url(Optional<? extends String> url) {
    if (url.isPresent()) {
      return url(url.get());
    } else {
      return clearUrl();
    }
  }

  /**
   * Sets the value to be returned by {@link ToolConsumerInstance#url()}.
   *
   * @return this {@code Builder} object
   */
  public ToolConsumerInstance.Builder nullableUrl(@Nullable String url) {
    if (url != null) {
      return url(url);
    } else {
      return clearUrl();
    }
  }

  /**
   * If the value to be returned by {@link ToolConsumerInstance#url()} is present, replaces it by
   * applying {@code mapper} to it and using the result.
   *
   * <p>If the result is null, clears the value.
   *
   * @return this {@code Builder} object
   * @throws NullPointerException if {@code mapper} is null
   */
  public ToolConsumerInstance.Builder mapUrl(UnaryOperator<String> mapper) {
    return url(url().map(mapper));
  }

  /**
   * Sets the value to be returned by {@link ToolConsumerInstance#url()} to {@link Optional#empty()
   * Optional.empty()}.
   *
   * @return this {@code Builder} object
   */
  public ToolConsumerInstance.Builder clearUrl() {
    url = null;
    return (ToolConsumerInstance.Builder) this;
  }

  /** Returns the value that will be returned by {@link ToolConsumerInstance#url()}. */
  public Optional<String> url() {
    return Optional.ofNullable(url);
  }

  /** Sets all property values using the given {@code ToolConsumerInstance} as a template. */
  public ToolConsumerInstance.Builder mergeFrom(ToolConsumerInstance value) {
    value.contactEmail().ifPresent(this::contactEmail);
    value.description().ifPresent(this::description);
    value.guid().ifPresent(this::guid);
    value.name().ifPresent(this::name);
    value.url().ifPresent(this::url);
    return (ToolConsumerInstance.Builder) this;
  }

  /**
   * Copies values from the given {@code Builder}. Does not affect any properties not set on the
   * input.
   */
  public ToolConsumerInstance.Builder mergeFrom(ToolConsumerInstance.Builder template) {
    template.contactEmail().ifPresent(this::contactEmail);
    template.description().ifPresent(this::description);
    template.guid().ifPresent(this::guid);
    template.name().ifPresent(this::name);
    template.url().ifPresent(this::url);
    return (ToolConsumerInstance.Builder) this;
  }

  /** Resets the state of this builder. */
  public ToolConsumerInstance.Builder clear() {
    ToolConsumerInstance_Builder _defaults = ToolConsumerInstance.builder();
    contactEmail = _defaults.contactEmail;
    description = _defaults.description;
    guid = _defaults.guid;
    name = _defaults.name;
    url = _defaults.url;
    return (ToolConsumerInstance.Builder) this;
  }

  /**
   * Returns a newly-created {@link ToolConsumerInstance} based on the contents of the {@code
   * Builder}.
   */
  public ToolConsumerInstance build() {
    return new ToolConsumerInstance_Builder.Value(this);
  }

  /**
   * Returns a newly-created partial {@link ToolConsumerInstance} for use in unit tests. State
   * checking will not be performed.
   *
   * <p>Partials should only ever be used in tests. They permit writing robust test cases that won't
   * fail if this type gains more application-level constraints (e.g. new required fields) in
   * future. If you require partially complete values in production code, consider using a Builder.
   */
  public ToolConsumerInstance buildPartial() {
    return new ToolConsumerInstance_Builder.Partial(this);
  }

  private static final class Value implements ToolConsumerInstance {
    // Store a nullable object instead of an Optional. Escape analysis then
    // allows the JVM to optimize away the Optional objects created by our
    // getter method.
    private final String contactEmail;
    // Store a nullable object instead of an Optional. Escape analysis then
    // allows the JVM to optimize away the Optional objects created by our
    // getter method.
    private final String description;
    // Store a nullable object instead of an Optional. Escape analysis then
    // allows the JVM to optimize away the Optional objects created by our
    // getter method.
    private final String guid;
    // Store a nullable object instead of an Optional. Escape analysis then
    // allows the JVM to optimize away the Optional objects created by our
    // getter method.
    private final String name;
    // Store a nullable object instead of an Optional. Escape analysis then
    // allows the JVM to optimize away the Optional objects created by our
    // getter method.
    private final String url;

    private Value(ToolConsumerInstance_Builder builder) {
      this.contactEmail = builder.contactEmail;
      this.description = builder.description;
      this.guid = builder.guid;
      this.name = builder.name;
      this.url = builder.url;
    }

    @Override
    public Optional<String> contactEmail() {
      return Optional.ofNullable(contactEmail);
    }

    @Override
    public Optional<String> description() {
      return Optional.ofNullable(description);
    }

    @Override
    public Optional<String> guid() {
      return Optional.ofNullable(guid);
    }

    @Override
    public Optional<String> name() {
      return Optional.ofNullable(name);
    }

    @Override
    public Optional<String> url() {
      return Optional.ofNullable(url);
    }

    @Override
    public ToolConsumerInstance.Builder toBuilder() {
      return ToolConsumerInstance.builder().mergeFrom(this);
    }

    @Override
    public boolean equals(Object obj) {
      if (!(obj instanceof ToolConsumerInstance_Builder.Value)) {
        return false;
      }
      ToolConsumerInstance_Builder.Value other = (ToolConsumerInstance_Builder.Value) obj;
      return Objects.equals(contactEmail, other.contactEmail)
          && Objects.equals(description, other.description)
          && Objects.equals(guid, other.guid)
          && Objects.equals(name, other.name)
          && Objects.equals(url, other.url);
    }

    @Override
    public int hashCode() {
      return Objects.hash(contactEmail, description, guid, name, url);
    }

    @Override
    public String toString() {
      StringBuilder result = new StringBuilder("ToolConsumerInstance{");
      String separator = "";
      if (contactEmail != null) {
        result.append("contactEmail=").append(contactEmail);
        separator = ", ";
      }
      if (description != null) {
        result.append(separator);
        result.append("description=").append(description);
        separator = ", ";
      }
      if (guid != null) {
        result.append(separator);
        result.append("guid=").append(guid);
        separator = ", ";
      }
      if (name != null) {
        result.append(separator);
        result.append("name=").append(name);
        separator = ", ";
      }
      if (url != null) {
        result.append(separator);
        result.append("url=").append(url);
      }
      result.append("}");
      return result.toString();
    }
  }

  private static final class Partial implements ToolConsumerInstance {
    // Store a nullable object instead of an Optional. Escape analysis then
    // allows the JVM to optimize away the Optional objects created by our
    // getter method.
    private final String contactEmail;
    // Store a nullable object instead of an Optional. Escape analysis then
    // allows the JVM to optimize away the Optional objects created by our
    // getter method.
    private final String description;
    // Store a nullable object instead of an Optional. Escape analysis then
    // allows the JVM to optimize away the Optional objects created by our
    // getter method.
    private final String guid;
    // Store a nullable object instead of an Optional. Escape analysis then
    // allows the JVM to optimize away the Optional objects created by our
    // getter method.
    private final String name;
    // Store a nullable object instead of an Optional. Escape analysis then
    // allows the JVM to optimize away the Optional objects created by our
    // getter method.
    private final String url;

    Partial(ToolConsumerInstance_Builder builder) {
      this.contactEmail = builder.contactEmail;
      this.description = builder.description;
      this.guid = builder.guid;
      this.name = builder.name;
      this.url = builder.url;
    }

    @Override
    public Optional<String> contactEmail() {
      return Optional.ofNullable(contactEmail);
    }

    @Override
    public Optional<String> description() {
      return Optional.ofNullable(description);
    }

    @Override
    public Optional<String> guid() {
      return Optional.ofNullable(guid);
    }

    @Override
    public Optional<String> name() {
      return Optional.ofNullable(name);
    }

    @Override
    public Optional<String> url() {
      return Optional.ofNullable(url);
    }

    private static class PartialBuilder extends ToolConsumerInstance.Builder {
      @Override
      public ToolConsumerInstance build() {
        return buildPartial();
      }
    }

    @Override
    public ToolConsumerInstance.Builder toBuilder() {
      ToolConsumerInstance.Builder builder = new PartialBuilder();
      builder.nullableContactEmail(contactEmail);
      builder.nullableDescription(description);
      builder.nullableGuid(guid);
      builder.nullableName(name);
      builder.nullableUrl(url);
      return builder;
    }

    @Override
    public boolean equals(Object obj) {
      if (!(obj instanceof ToolConsumerInstance_Builder.Partial)) {
        return false;
      }
      ToolConsumerInstance_Builder.Partial other = (ToolConsumerInstance_Builder.Partial) obj;
      return Objects.equals(contactEmail, other.contactEmail)
          && Objects.equals(description, other.description)
          && Objects.equals(guid, other.guid)
          && Objects.equals(name, other.name)
          && Objects.equals(url, other.url);
    }

    @Override
    public int hashCode() {
      return Objects.hash(contactEmail, description, guid, name, url);
    }

    @Override
    public String toString() {
      StringBuilder result = new StringBuilder("partial ToolConsumerInstance{");
      String separator = "";
      if (contactEmail != null) {
        result.append("contactEmail=").append(contactEmail);
        separator = ", ";
      }
      if (description != null) {
        result.append(separator);
        result.append("description=").append(description);
        separator = ", ";
      }
      if (guid != null) {
        result.append(separator);
        result.append("guid=").append(guid);
        separator = ", ";
      }
      if (name != null) {
        result.append(separator);
        result.append("name=").append(name);
        separator = ", ";
      }
      if (url != null) {
        result.append(separator);
        result.append("url=").append(url);
      }
      result.append("}");
      return result.toString();
    }
  }
}
